category1,body
Anonymity Networks,"
			
				
I just saw a post in TOR stack exchange titled “Is it recommended that we use a VPN along with Tor?” and wanted to post about using VPN and TOR alongside. Previously, I’ve posted Socks Rocks! The Good, The Bad and The Ugly and Socks Rocks Again! and this post is conclusion of the posts.







Actually VPN hides your IP from ISP but the VPN server will know your real IP address and your packets’ destination.



TOR uses three extra (software-based) router in order to hide your IP from destination and routers. (Actually the first router knows your real IP but does know the destination. Final router knows destination but does not know your real IP). It is considered in TOR that the routers do not share the information, else they can identify your session and IP.



Based on the above, you can use TOR through VPN or VPN through TOR.



 In VPN through TOR, you will connect to VPN server from TOR. VPN does not know your real IP (knows the final router’s IP) but the destination does not know you’re requesting through TOR. In TOR through VPN, you will connect to TOR through VPN, therefore VPN provider will know your real IP but wont know the destination. First router will know the VPN’s IP (not your real IP).



Case 1 can help you when you want use TOR and access sites such as Google which has banned access from TOR which is discussed in Socks Rocks Again!.  Case 2 can help you in privacy, because you add an extra layer of IP to access you.  The following picture depicts the two cases:



Case 1: VPN through TOR, Case 2: TOR through VPN
			
		"
Anonymity Networks,"
			
				
OnionFarm was one of the challenges in UUTCTF which was held in 25-28 April 2019 by Urmia University of Technology. The challenge has been solved by 4 teams. Following, the challenge details and the write up is discussed.







OnionFarm



The challenge said that the flag is inside the following link: http://uutctfysirwosxjx.onion/



OnionFarm Challenge in UUTCTF2019



The link is a hidden service and it starts with http. Therefore, it should be opened by TOR. Using Tor Browser, the page is loaded.



OnionFarm Hidden Web Service



As it is shown in the above picture, There is a flag signed by a private key (in base64) and SHA-1 hash of its public key is given.



Signed Flag: Y94QDVNr0kOeu3j2cdqOuGyUb+V1KZXMQiEWNktf3g46TeEmKjc9MI4Ox2WaK/JNV433E9VWMAOXGC79hpZ0WO6pfQurBtcoqYj3dCZRKESGY0V4LCxkE6r+NSKZf0HxaYVsMV6uIXEQIKORO+DWCWI2gVNvD4K+Mw4vbHcxpRs= 



SHA-1 of the public key: uutctfysirwosxjxadwzgzy34lrhjknq 



But the SHA-1 signature is not in familiar form. Instead the first 16 chars of SHA-1 hash is the same as the hidden web service name:  http://uutctfysirwosxjx.onion/ 



The TOR System



In version 2 of the onion addresses in TOR system, the onion link is 16 first chars of the public key of the hidden service, encoded in base32 address. Therefore, the main task is getting the public key of this hidden service. TOR itself gives a control port for controlling TOR. Stem is a python library for interacting with TOR control port. Following code from github link, can be used for getting the hidden service descriptors (information).



import sys
import argparse
import stem
from stem.control import Controller
def main():
    parser = argparse.ArgumentParser(description=""%s fetches a Tor hidden ""
                                     ""service descriptor."" % sys.argv[0])
    parser.add_argument(""-p"", ""--port"", type=int, default=9051,
                        help=""Tor controller port"")
    parser.add_argument('onion_address', type=str, help='Onion address')
    args = parser.parse_args()
    with Controller.from_port(port=args.port) as controller:
        controller.authenticate()
        try:
            hs_descriptor = controller.get_hidden_service_descriptor(args.onion_address)
            print(hs_descriptor)
        except stem.DescriptorUnavailable:
            print(""Descriptor not found, the hidden service may be offline."")
            return 1
if __name__ == '__main__':
    sys.exit(main()) 



Using the above code, one can fetch the public key for the hidden service.



HS Descriptor for OnionFarm



RSA Public Key



The Flag



We’ve found the public key, but the problem is that it is in RSA PUBLIC KEY format. Openssl accepts PEM format which should be PUBLIC KEY. Therefor we need to convert the RSA public key in a readable format. First of all the base64 encoded text, is in ASN.1 format. Using tools such as ASN1JS, public key bytes and modulus can be gained. The online version of ASN1JS is available in jsfiddle website.



ASN.1 Format



Now we have public key (138865786359602944891762156467560871881909108828375427630579384292773) and modulus (527482743). We need to form an PEM file. With the public key and modulus bytes, we can form an XML format. In the following picture, I just show the modulus. The same procedure is done for public key.



Bytes to Base64



In final stage, we need a tool to convert XML format to PEM. I’ve used Superdry Developer .



Final Public Key



The final public key in PEM format is: 



—–BEGIN PUBLIC KEY—– MIGgMA0GCSqGSIb3DQEBAQUAA4GOADCBigKBgQDFwF6gXXDrPMhAi/3ePAaGtY3h hknEorJT3oXu6qBBPdKjjMTLEw504BsNKzCxGWOG+477WgLaB4KTncupQ65EawXm TjzWX99ongOq32cuuHYjl7LGuqVfzf1uQqjIZpftJouzAxOXq9h3qE2wI0xRVFPH YIiOat+jhhNG2jkknwIEH3C/dw== —–END PUBLIC KEY—–



Now we should pass flag to openssl and verify the flag using it, but first we need to base64 decode the flag.



Decryption



Voila! The flag is: UUTCTF{hIdden_0ni0ns_should_be_harvested}
			
		"
AndroJava,"
			
				
I was researching about Android Malware and their features, compare them. I’ve found that most of them (actually all) do not support live video stream from Android camera, aka Spy Camera, and one that supports live camera, needs an activity. Therefore, I’ve started a hidden spy camera project to live stream video from Android camera to an Rtmp server without activity, named Live Hidden Camera.



Live Hidden Camera in Action







The Idea of Spy Camera



As I’ve told before, the main idea is from lack of live stream libraries. I wanted to know how the Android camera works and how RATs benefits the spy camera. I’ve searched and found a Github repository, containing Android RATs. The only RAT I’ve found with live stream ability was AndroRAT which needs activity for video stream.



AndroRAT



What I Did



I found open source libraries which is used for video streaming in Android. They get picture from camera, audio from microphone, encode and sync them, and finally send them to a stream server. The list of opensource video streaming libraries are:



 https://github.com/begeekmyfriend/yaseahttps://github.com/ant-media/LiveVideoBroadcasterhttps://github.com/TakuSemba/RtmpPublisherhttps://github.com/fyhertz/libstreaming 



But all the libraries needs a SurfaceView which is graphical element fr displaying camera preview to user. In Android’s security mechanism, camera preview should be displayed to user for capturing from camera. Therefore, I’ve searched for hiding camera preview and I’ve found  https://github.com/kevalpatel2106/android-hidden-camera which exactly do the same, overlays a dummy SurfaceView with size of 1*1. But the library is used for taking pictures, not streaming.



Live Hidden Camera Born



The idea for hidden streaming is found based on Android-Hidden-Camera and Yasea. The main work was merging them, which was a bit annoying. But finally done.



For the aim of streaming server, I’ve used Ant Media Server which has a community edition and is free and opensource forked from Red5. Here is a manual for running the Ant Media Server.



Ant Media Server



The final stage was creating a library for others use. The library and the source code are available in my Github repository.



https://github.com/mirsamantajbakhsh/LiveHiddenCamera/



Happy streaming!





Live Hidden Camera in Action
			
		"
IoT,"
			
				
I’ve previously installed a Home Assistant (HA) in my home and attached temperature and humidity sensor to it. I’ve tweeted about  Home Assistant times ago. Now I had added it more features.







Customizing UI



With the growth of sensors and smart elements at home, I’ve customized the HA interface and split the sensors in the following categories:



WeatherCCTVMediaNews



Weather



There are two weather sources in my current smart home. One source is from DarkSky sensor, the other is the old temperature and humidity sensor which shows the weather conditions inside home!



Home Assistant – Weather



CCTV



I’ve added CCTV cams and attached them to HA. Finding the preview links was a bit annoying, but finally added.



Home Assistant – CCTV



Media



These devices was in my previous configuration but a Chrome Cast and a Samsung TV is added to this section.



Home Assistant – Media Manager



News



I’ve used instructions for Home Assistant feed parser, but there was needed for some improvement (support for RTL languages or display improvements) which I had changed. The RSS feed of news are added to the HA.



Home Assistant – News Feed



What’s Next for Home Assistant (HA) 



Currently I’m working on adding images to the RSS feeds in my free time. I like to create a smart mirror and attach it to the HA and attach more sensors! Let’s hope it all goes well!



The Demo of HA



Here I’ve uploaded a video captured from HA to YouTube:






			
		"
AndroJava,"
			
				
I previously created a “HiddenLiveCamera” library for Android. In Github, I’ve received an issue by  geminird  indicating that phone no responded. I described the reason and geminird asked for live audio stream.



In another post, I’ve wrote about broadcasting media files (such as mp3) using Mixxx and IceCast. In this post, I’ve write about my library and how to use it in Android projects in order to publish stream from Android. The code of the library is grabbed from CoolMic.







The Live Audio Android Library



I’ve created the library from CoolMic code, which is listed as IceCast client library. The code can be found in my GitHub Live Audio Repository. In addition I’ve published it as an AAR library which can be included in your Android applications. Making life easier …



Using The Library



There is needed to configure stream server (here, IceCast) and Android client (using my LiveAudio Android library ). The library code is accessible from my GitHub repository.



IceCast Side



After that, you should config your IceCast (or any other audio stream server on your choice). Using my post about broadcasting yourself, you can start configuration. But for this tutorial, I’ve used following stream source config in my IceCast:



<mount type=""normal"">
    <mount-name>/harleyquinn</mount-name>
    <username>joker</username>
    <password>hackme</password>
    <max-listeners>2</max-listeners>
    <max-listener-duration>360000</max-listener-duration>
    <dump-file>/tmp/harley.ogg</dump-file>
    <charset>ISO8859-1</charset>
    <public>1</public>
    <stream-name>Harley Quinn Radio</stream-name>
    <stream-description>Listen to my live audio from Gotham! With Joker!</stream-description>
    <genre>Heavy</genre>
    <bitrate>64</bitrate>
    <type>application/ogg</type>
    <subtype>vorbis</subtype>
    <hidden>1</hidden>
    <burst-size>65536</burst-size>
    <mp3-metadata-interval>4096</mp3-metadata-interval>
    <on-connect>/home/icecast/bin/source-start</on-connect>
    <on-disconnect>/home/icecast/bin/source-end</on-disconnect>
</mount>




Start your IceCast using settings similar to above.



Android Side



The library is published in JCenter, so you can use it in your Android project (I assume that you’re using gradle) like:



 implementation 'ir.mstajbakhsh.android:LiveAudio:1.0.0'



After adding the library, one can set a Config object for IceCase configuration, like:



Config c = new Config();
c.host(""192.168.43.194"");
c.port(8000);
c.username(""joker"");
c.password(""hackme"");
c.mount(""/harleyquinn"");
c.sampleRate(16000);



And then pass the config object to a LiveAudio object:



LiveAudio l = new LiveAudio(c);try {    l.start();} catch (Exception e) {    e.printStackTrace();}



Everything is OK. Start your application to broadcast yourself!



Video for Broadcast Yourself Through Android



I’ve created a demo video for using of LiveAudio:





Live Audio Library in Action
			
		"
Anonymity Networks,"
			
				
In this post, I will talk a little about OnionBalance, a load balancer in TOR network. It enables adding multiple hidden services which can be accessed from one Onion Address.



(The picture is from Life Hacker)







A Small Description



If you want to know more about TOR network and hidden services, you can check my previous posts in Anonimity Category. 



The idea of load balancing is about serving a service (such as Web service) using multiple instances (web servers). Load balancing helps users to wait less (for loading of a web page) and less traffic and load on the server.



This is the general idea of a web load balancer:



Simple Web Server Load Balancer



In normal load balancing schema, a DNS server can resolve the same domain name to multiple IPs using a load balancing algorithm (such as Round Robin), but in TOR network, there is no DNS server. The hidden services are served by HSD (Hidden Service Directories). You can get more information from this link.



Final Step in Hidden Service Connection Establishment



Therefore, Bob (who owns a hidden service) register its Introduction Points in the HSD (or the DB in picture). But Bob runs a hidden service with one address. What is Bob has more hidden services (same instance)?



Onion Balance



If Bob can run multiple hidden services and ask HDSs to change the Introduction Points of the multiple hidden services to only one Introduction Point, then the one address will be transferred to IP of the 1st hidden service or the 2nd or the 3rd, etc.



This is how the Onion Balance (and similar tools) works.



The Idea ‌Behind Onion Balance



Running Onion Balance



I made a video tutorial about running onion balance. If you have any question, feel free to ask.





Onion Balance Video Tutorial
			
		"
AndroJava,"
			
				
In previous post, I’ve talked about compiling TOR from source in Android and added some helper libraries for starting and configuring TOR. In this post, I’ve created a library based on Tor Binary (version 0.4.4.0) and published in GitHub, JFrog and JitPack.







Process



Whole Process is simple. The following picture depicts it.



TOR Android Process



Importing The TOR Android into Android Studio



There are 3 ways for importing the AAR library to Android Studio.




Download the latest release from TOR Android Github Page.Import from jCenter




implementation 'ir.mstajbakhsh:tor-android:1.0.0'




Get from JitPack



allprojects {
    repositories {
	maven { url 'https://jitpack.io' }
    }
}
dependencies {
implementation 'com.github.mirsamantajbakhsh:TorAndroid:1.0.0'
}




Sample Code



Here is a sample code for starting the TOR Android, an application with only one activity. The only needed permission is INTERNET which should be added to the Manifest.



@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    AsyncTask.execute(new Runnable() {
        @Override
        public void run() {

            final TorProxy tb = new TorProxy.TorBuilder(getApplicationContext())
                    .setSOCKsPort(TOR_TRANSPROXY_PORT_DEFAULT) //9150 for example
                    .setUseBrideges(false)
                    .setExternalHiddenServicePort(80)
                    .setInternalHiddenServicePort(80)
                    .setDebuggable(false)
                    .build();
            tb.init();

            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    Toast.makeText(getApplicationContext(), ""Initialized"", Toast.LENGTH_LONG).show();
                }
            });


            try {
                tb.start(new IConnectionDone() {
                    @Override
                    public void onSuccess() {
                        Log.d(""TorAndroid"", ""Tor started successfully."");
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(getApplicationContext(), ""TOR is OK."", Toast.LENGTH_LONG).show();
                                Toast.makeText(getApplicationContext(), tb.getOnionAddress(), Toast.LENGTH_LONG).show();
                            }
                        });

                    }

                    @Override
                    public void onFailure(final Exception ex) {
                        Log.e(""TorAndroid"", ""Error in starting Tor.\r\n"" + ex.getMessage());
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(getApplicationContext(), ""Error\r\n"" + ex.getMessage(), Toast.LENGTH_LONG).show();
                            }
                        });
                    }
                });
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    });

}



The result is OK. See it here:







Useful Links



https://github.com/mirsamantajbakhsh/TorAndroidhttps://bintray.com/mirsamantajbakhsh/Android/TorAndroid
			
		"
Anonymity Networks,"
			
				
Previously, I’ve described how to run hidden mail service over TOR and how to connect to it using ThunderBird.



In this post, I’ve create a video demo of what I’ve told in the posts.







Scenario of  Creating Hidden Mail Service 



The scenario is made up of a mail server (hMailServer) which is located behind a TOR hidden service and do not access to Internet. By means of do not access to Internet, I mean that hMailServer’s access to the Internet is blocked by firewall which it cannot send emails to other servers. It is used to ensure local delivery of emails.



Additionally there are two users: alice and bob over the fake domain of hidden.one which communicate with each other over the hidden mail server. 



Video for Creating Hidden Mail 



You can find the video on my Youtube channel. Mr Tajbakhsh Youtube channel





Creating and Configuring Hidden Mail Service over TOR




			
		"
Anonymity Networks,"
			
				
In this post, I want to talk about compiling and using TOR in your Android projects. The main source relies in guardian repository. 







Getting TOR Binary



As indicated in tor-android repository, by adding the maven URL to the gradle config of your project, you are able to use TOR’s latest build for Android. However, I couldn’t add it through the link.



TOR Android Maven URL



This is what I get when I click on the link:



Error of Maven URLKof TOR Android binary



Therefore I decided to download the complete source code and compile from scratch.



Getting TOR



The very easy method of getting the source code is:



git clone https://github.com/guardianproject/tor-android.git



But after getting the code, you need to download the submodules which are located in external subfolder.



TOR Android’s submodules



git submodule update --init
# if there are nested submodules:
git submodule update --init --recursive

# from https://www.vogella.com/tutorials/GitSubmodules/article.html#:~:text=2.3.-,Pulling%20with%20submodules,in%20the%20git%20pull%20command%20.



So everything is OK. Now you can use ./gradlew build  to build the source code. However, you should compile the binaries first. You can watch my YouTube video about the details.



My Contribution



I have added some code to make installing and starting TOR easier. Its functionality is similar to Tor Onion Project.



You can see my repository in the following link: https://github.com/mirsamantajbakhsh/tor-android/tree/HS_Connect



Here is a screenshot of my commits in tor-android project in a branch named HS_Connect.



My Contribution in tor-android for installing and starting TOR in Android



The Video



The whole process is recorded and uploaded to my YouTube channel. 





Join my channel to get all the videos!
			
		"
AndroJava,"
			
				
In this post, I’m going to talk about my new library for using NMAP in any Android project. I’ve released the library in my GitHub and Bintray. Using the library, you can use NMAP on non rooted Android device.







Alternatives



It is similar to other projects available in Google play such as Network Mapper. Actually the binary library is based on the binary versions published by kost same author of Network Mapper.



The binary files of NMAP are available in kosts’s GitHub repository.



How To Use



There is three simple step for using the library in your project:



Add INTERNET permission to the ManifestAdd NMAPAndroid dependency in your app level Gradle file.Write the simple code!



Here is the permission: 



<uses-permission android:name=""android.permission.INTERNET"" />



Here is the dependency:



implementation 'ir.mstajbakhsh:nmap-android:1.0.0'



Here is the simple code:



NMAPUtilities n = new NMAPUtilities(context);
n.startInstallation();

final StringBuilder line_buffer = new StringBuilder();
OutputStream ops = new OutputStream() {
	@Override
    public void write(int b) {
    	if (b == '\n') {
            System.out.println(line_buffer.toString());
            line_buffer.setLength(0);
        } else {
            line_buffer.append(Character.toChars(b));
        }
    }
};

try {
    n.execCommand(ops, ""-A"", ""192.168.1.0/24"", ""--system-dns"");
} catch (Exception e) {
    e.printStackTrace();
}



Here is the sample output of the project:



NMAP Android Sample Output



Limitation



Due to the size limit, only two binary versions are included inside the library including: arm and x86. Additionally, the flow chart of automatic installation of the library is depicted below:



NMAP Android Automatic Installation Process



Source Code



The source code is available in my personal repository in GitHub. https://github.com/mirsamantajbakhsh/NMAPAndroid



Donation



Do not forget to buy me a cup of coffee. My bitcoin wallet address is:



1F5uiEmdCLJX5KktWHE1wkc63feKJYMmxS
			
		"
Academic,"
			
				In the Reversing Java: Part I, I’ve described the main structure of Java class file bytes. In this part, I’ll continue decompiling the HelloWorld example.

Again the bytes of compiled class files is inserted:

We have analyzed till constant pool. Each constant pool entry has the following structure:
cp_info {
u1 tag;
u1 info[];
}
The tag indicates what type of constant is the following constant and the info (length of info) depends of the tag type. List of allowed tags are:



Constant Type 
Value


CONSTANT_Class 
7


CONSTANT_Fieldref 
9


CONSTANT_Methodref 
10


CONSTANT_InterfaceMethodref 
11


CONSTANT_String 
8


CONSTANT_Integer 
3


CONSTANT_Float 
4


CONSTANT_Long 
5


CONSTANT_Double 
6


CONSTANT_NameAndType 
12


CONSTANT_Utf8 
1



Constant Pool (from [1] to [28]):
Constant Pool = cp
cp[1]: {tag = 0a} =>  CONSTANT_Methodref
The info[] of method ref contains four bytes for the method. Two bytes for class name and two bytes for name and type => class name: 00 06 (cp[6]), name and type: 00 0f (cp[15])
cp[2]: {tag = 09} => CONSTANT_Fieldref
info[] part is just like class ref => class name: 00 10 (cp[16]), name and type: 00 11 (cp[17])
cp[3]: {tag = 08} => CONSTANT_String 
info[] part has reference for string itself (two bytes). 00 12 means that the real string is in cp[18].
cp[4]: {tag = 0a} => CONSTANT_Methodref
class name: 00 13 (cp[19]), name and type: 00 14 (cp[20])
cp[5]: {tag = 07} => CONSTANT_Class
info[] part has two bytes indicating the class. 00 15 (cp[21])
cp[6]: {tag = 07} => CONSTANT_Class
00 16 (cp[22])
cp[7]: {tag = 01} => CONSTANT_Utf8
info[] part has two bytes indicating string length and the remaining length bytes is string itself encoded in UTF8. 00 06 => String has 6 bytes.
(next 6 bytes): 3c 69 6e 69 74 3e  => <init>
cp[8]: {tag = 01} => CONSTANT_Utf8
length: 00 03 (3)
String: 28 29 56 => ()V
cp[9]: {tag = 01} => CONSTANT_Utf8
length: 00 04 (4)
String: 43 6f 64 65 => Code
cp[10]: {tag = 01} => CONSTANT_Utf8
length: 00 0f (15)
String: 4c 69 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65  => LineNumberTable
cp[11]: {tag = 01} => CONSTANT_Utf8
length: 00 04 (4)
String: 6d 61 69 6e => main
cp[12]: {tag = 01} => CONSTANT_Utf8
length: 00 16 (22)
String: 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b 29 56  => ([Ljava/lang/String;)V
cp[13]: {tag = 01} => CONSTANT_Utf8
length: 00 0a (10)
String: 53 6f 75 72 63 65 46 69 6c 65  => SourceFile

cp[14]: {tag = 01} => CONSTANT_Utf8
length: 00 0f (15)
String: 48 65 6c 6c 6f 57 6f 72 6c 64 2e 6a 61 76 61 => HelloWorld.java
cp[15]: {tag = 0c} => CONSTANT_NameAndType 
info[] has four bytes, two for name two for descriptor:

name: 00 07 (cp[07]), descriptor: 00 08 (cp[08])
cp[16]: {tag = 07} => CONSTANT_ClassInfo
class name: 00 17 (cp[23])
cp[17]: {tag = 0c} => CONSTANT_NameAndType
name: 00 18 (cp[24]), descriptor: 00 19 (cp[25])
cp[18]: {tag = 01} => CONSTANT_Utf8
length: 00 0c (12)
String: 48 65 6c 6c 6f 20 57 6f 72 6c 64 21  => Hello World!
cp[19]: {tag = 07} => CONSTANT_ClassInfo
class name: 00 1a (cp[26])
cp[20]: {tag = 0c} => CONSTANT_NameAndType
name: 00 1b (cp[27]), descriptor: 00 1c (cp[28])
cp[21]: {tag = 01} => CONSTANT_Utf8
length: 00 0a (10)
String: 48 65 6c 6c 6f 57 6f 72 6c 64  => HelloWorld
cp[22]: {tag = 01} => CONSTANT_Utf8
length: 00 10 (16)
String: 01 20 10 6a 61 76 61 2f 6c 61 6e 67 2f 53 79 73 => java/lang/Object
cp[23]: {tag = 01} => CONSTANT_Utf8
length: 00 10 (16)
String: 6a 61 76 61 2f 6c 61 6e 67 2f 53 79 73 74 65 6d  => java/lang/System
cp[24]: {tag = 01} => CONSTANT_Utf8
length: 00 03 (03)
String: 6f 75 74  => out
cp[25]: {tag = 01} => CONSTANT_Utf8
length: 00 15 (21)
String: 4c 6a 61 76 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d 3b  => Ljava/io/PrintStream;
cp[26]: {tag = 01} => CONSTANT_Utf8
length: 00 13 (19)
String: 6a 61 76 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d => java/io/PrintStream;
cp[27]: {tag = 01} => CONSTANT_Utf8
length: 00 07 (07)
String: 70 72 69 6e 74 6c 6e  => println
cp[28]: {tag = 01} => CONSTANT_Utf8
length: 00 15 (21)
String: 28 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b 29 56  => (Ljava/lang/String;)V
The above fields were constant fields in a simple java class. The remaining bytes will be discussed in the next tutorial.
For more information you may refer to:
[1] https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf
[2] https://docs.oracle.com/javase/specs/jvms/se7/jvms7.pdf
[3] http://se.inf.ethz.ch/old/teaching/ss2007/0284/Slides/Lect9-2.pdf
You can Read the rest of this article in reversing-java-part-iii.
			
		"
Personal,"
			
				I am Urmia Lake
You may support Urmia Lake campaign by signing the following petition.
 
Or sign it through this link.
			
		"
Academic,"
			
				In the previous tutorials, I’ve described the simple Java byte code structure and stated to reverse a simple Hello World Java application. In this tutorial, I will describe the remaining parts of the class file.
Access Flags
The next byte after constant pool is Access Flag. First two bytes (00 21) shows that this class is super+ public.
List of access flags is attached below:


This Class and Super Class
Next two bytes are this class (00 05) and the followed two bytes are super class (00 06). Which means that cp[05] is this class (HelloWorld) and cp[06] is super class (<java/lang/Object>). You may check previous article about reversing java for constant pool entries.
Interfaces
The next two bytes after, are interfaces count which shows the number of interfaces which are implemented in this class. Thus the simple Hello World does not implement any interfaces, number of interfaces is 0 (00 00).
Fields
The next two bytes after, are fields count which shows the number of  fields which are used in this class. Thus the simple Hello World does not have any field, number of interfaces is 0 (00 00). As a note, fields are variables that are defined inside class structure and are accessible through all class members.

class test {
public String fieldString = ""A Simple field variable"";
public test() {
}
}

Methods
The next two bytes shows the methods count (00 02). Here we have two methods which follows method info structure:

First Method
We start to analyze the bytes of the first method.
00 01 => Access Flag => public
00 07 => Name Index (cp[07]) => <init>
00 08 => Descriptor Index (cp[08]) => ()V (means void)
00 01 => Attribute Count (1)
Attribute Info:
00 09 => Attribute Name Index (cp[09]) => Code
00 00 00 1d => Code Length (Code attribute followed by four bytes indicating code length, thus java class can have maximum FF FF FF FF = 4,294,967,295 lines of code!) => 29
00 01 => Maximum Stack Depth => 1
00 01 => Maximum Local Variables => 1
00 00 00 05 => Code Length => 5
Byte Codes (next 5 bytes):
2a b7 00 01 b1 (Check Java bytecode instruction listings for byte codes table):
2a => aload_0
b7 00 01 => invokespecial cp[01] => invokespecial java/lang/Object/<init>()V
b1 => return
Next LineNumberTable attribute is parsed:

00 00 00 01 => 1 Line Table
00 0a => Name Index (cp[10]) => LineNumberTable
00 00 00 06 => Attribute Length => 6
00 01 => Line Number Table Lenght => 1
00 00 => start pc => 0
00 01 => Line Number => 1

Second Method
00 09 => Attribute Name Index (cp[09]) => Code
00 0b => Name (cp[11]) => <main>
00 0c => Descriptor (cp[12]) => ([Ljava/lang/String;)V
00 01 => Access Flag => public static
00 09 => Attribute Name Index (cp[9]) => Code
00 00 00 25 => Code Length => 37
00 02 => Maximum Stack Depth => 2
00 01 => Maximum Local Variables => 1
00 00 00 09 => Code Length => 9
Byte Codes (next 9 bytes):
b2 00 02 12 03 b6 00 04 b1 (Check the same link at the above for byte codes table):
getstatic cp[2] => java/lang/System/out Ljava/io/PrintStream;
ldc cp[3] => Hello World!
invokevirtual cp[4] => java/io/PrintStream/println(Ljava/lang/String;)V
return
00 00 00 01 => 1 Line Table
00 0a => Name Index (cp[10]) => LineNumberTable
00 00 00 0a => Attribute Length => 10
00 02 => Line Number Table Lenght => 2
Number 1:
00 00 => start pc => 0
00 03 => Line Number => 3
Number 2:
00 08 => start pc => 8
00 04 => Line Number => 4
Attributes
Remaining bytes are attributes of this class file. first two bytes are attributes count which is obviously 1 (00 01).
00 0d => Attribute Name Index (cp[13]) => SourceFile
00 00 00 02 => Length => 2
00 0e => Source File Name Index (cp[14]) => HelloWorld.java
The last two bytes (00 0e = cp[14]) shws the source file which is compiled to this class file.
Conclusion
A simple java Hello World example is compiled and reversed through the 3 part tutorial. You may use external tools to view (or edit) class files. Some useful tools are:
JD-GUI
Java ByteCode Editor
Also the class file is attached: Hello World.class
			
		"
Academic,"
			
				In this tutorial I want to write about using Apache Spark on Ubuntu machines where you can develop big data analysis apps with it.
First of all, I want to write a small and quick introduction to Hadoop + Spark environment. Hadoop makes it possible to work with lots of computers in a cluster. Work can be: storing files in cluster (HDFS – Hadoop Distributed File System), storing database in cluster (Apache HBase), or run software in cluster (MapReduce, Spark).

In Hadoop there is a master node who controls clients inside clusters and partition the data between them.
I do not want to talk about how to configure Hadoop + Spark in Linux. There is a nice tutorial which I followed and configured two machines (1 master + 1 slave). Here is the link. Thanks to Sumit Chawla.
Firstly I’ve configures my master node: Ubuntu 14.04 + Java Oracle 8 + Virtual Box

After that I’ve created my slave01 node which was a clone of master node. There is a good tutorial on how to clone virtual machines using VirtualBox in this link. Actually I’ve changed some configuration in slave including user name and display name. Here is a screenshot of slave01:

After that it is time to start HDFS + YARN + SPARK in master node. Commands are here:<br /><br />

$HADOOP_HOME$/sbin/start-dfs.sh
$HADOOP_HOME$/sbin/start-yarn.sh

And finally start Spark:
$SPARK_HOME$/sbin/start-all.sh

And control in both master and slave01 that daemons are running using jsp:

Everything is OK. You can check the spark WebUI in http://127.0.0.1:8080 and HDFS in http://127.0.0.1:50070 from master node.

I showed master with m and slave node with s [ It seems to be s 🙂 ]

It is time to programming. The main concept in MapReduce or Spark programming is (key, value). The main jobs is to read data from file (or HDFS) line by line. Process the lines by Map and create 0 or 1 or many (key, value) pairs. Hadoop will collect and sort the pairs with same key and give them to Reducer. Now reducer can decide what to do with the values. In the popular example of word count, the reducer sums all 1s to produce the word count.
 
I’ve developed with Java. I’ve installed Netbeans on master node and added libraries for Spark programming from $SPARK_HOME$/jars directory.
/**
* private static void cooccurenceCount(String inputFile, String outputFile) {
*       // Define a configuration to use to interact with Spark
*       SparkConf conf = new SparkConf().setAppName(""Cooccurence Count App"");
*
*        // Create a Java version of the Spark Context from the configuration
*        JavaSparkContext sc = new JavaSparkContext(conf);
*
*        // Load the input data, which is a text file read from the command line
*        JavaRDD<String> input = sc.textFile(inputFile);
*
*        // Java 8 with lambdas: split the input string into words
*        JavaRDD<String> words = input.flatMap((String t) -> {
*            JSONObject jobj = new JSONObject(t);
*            String text = String.valueOf(jobj.get(""Text""));
*            String[] outputString = new String[text.split("" "").length * (text.split("" "").length - 1)];
*            
*            int counter = 0;
*            
*            for (int i = 0; i < text.split("" "").length; i++) {
*                for (int j = i + 1; j < text.split("" "").length; j++) {
*                    outputString[counter++] = text.split("" "")[i] + "":"" + text.split("" "")[j];
*                }
*            }
*            return Arrays.asList(outputString).iterator();
*        });
*
*        // Java 8 with lambdas: transform the collection of words into pairs (word and 1) and then count them
*        JavaPairRDD<String, Integer> counts = words.mapToPair(t -> new Tuple2(t,1)).reduceByKey((x, y) -> (int)x + (int)y);
*
*        // Save the word count back out to a text file, causing evaluation.
*        counts.saveAsTextFile(outputFile);
*    }
 */
In the code above, I have parsed the data which is read from HDFS line by line and parsed JSON. Here is a part of my input file:

After that I create pairs of each tweet by its words to find their sequential co-occurrence. For example for the last tweet seen in the above:
(employs:people,1)
(employs:green,1)
(employs:nationality,1)
(people:green,1)
(people:nationality,1)
(green:nationality,1)
 
After compiling the source code to jar, I’ve copied the jar file on all machines (/tmp/tmp/TweetCount.jar) and start to mine them with the following command:
/**
 * ./spark-submit --master spark://master:6066 --deploy-mode cluster /tmp/tmp/TweetCount.jar hdfs://master:9000/test/data.txt hdfs://master:9000/test/output_Twitter_COOCCURENCE/
 */
And vola! Everything is OK and after executing, output is in HDFS /test/output_Twitter_COOCCURENCE.

The output of a sample file (part-00002) is displayed below:

			
		"
Personal,"
			
				I was working on my PhD. thesis and calculating the semantic similarities of words which is very heavy and take hours to response!
Recently I was interested to have a pocket size Quran. I have used Zekr before, but it is not so pocket size!

So I have downloaded Quran Persian translation text from Tanzil and start a small, pocket size Quran based on Skeleton.
A simple screen shot is available.
Holy Quran
The project is in my GitHub at this link.
			
		"
Academic,"
			
				I’ve met 2048 game many years ago. It is an addictive game witch takes lots of time from the player. 🙁
So what should I do if I want to have high score and save time? Here is where Smali takes part. 🙂
In this post I will describe how to inject into Android 2048 game and change the score!In the “Smali Code Injection” I describes how to inject into Android APK. The steps is like previous post but finding where to inject is the problem.
First of all I’ve downloaded 2048 APK and get Smali code with apktool.

Then I should find where the logic of the game is (the class and method). If the application is not obfuscated, you can use online tools such as Java Decompilers. Or you can use DEX2JAR and JDGUI.
If the application is obfuscated you should put some debug information in beginning of every method and trace the execution logic.
Fortunately 2048 was not obfuscated. So I’ve looked the logic and find where the score is changed.
  The code above is where new button created (2 or 4).

this.grid[x][y] = 4;
} else {
this.grid[x][y] = MOVE_3;
And finding the Smali code is the next step.
    
The point is that v10 contains the number 4. v9 contains 2 (in the ELSE section). v9 changed from const/4 v9, 0x2 to const/16 v9, 0x400 (0x400 = 1024). This is the good one because v9 is not reused after assignment. But unfortunately v10 assigned in the first lines of method and used before aput v10, v8, v6.
So I’ve added a new variable (v11) and assigned the value of the first lines to it. And changed the locas from 11 to 12.
So after creating APK and signing it with your certificate, the APK is ready to be installed. (if you are not familiar with signing and repacking, check previous post).
The screen shots of the new injected application are here:
 
I’ve uploaded both the APKs here. You may download and use them.
2048 Game [Main].apk
2048 Game [Injected].apk



			
		"
Personal,"
			
				After dealing with the old site, I’ve decided to reform my blog to this site. 🙂
The old UUTElgg is closed.
			
		"
AndroJava,"
			
				I hardly play the dino game which is created by Google and is available in Chrome browser for playing while there is no Internet connection. But the game itself is popular and can be found in different platforms. Recently I’ve changed two of them and now cacti and birds are ineffective.
Simple JavaScript Running T-Rex Version
There are lots of free versions of the game. Take Running T-Rex for example. The java script code is pretty formatted and ready to be deactivated!
Dino 1
Medium Android Running T-Rex Version
I’ve faced with an Android version of the game. So started to find where the game finishes. Based on JADX decompiler, the following code was the main part of detecting game over.
Dino 2
Based on Smali Code Injection techniques, I’ve deactivated the functions. Now the Dino can run freely both in JavaScript and Android!
Dino JavaScript (Click to see the animated GIF version):
Dino JavaScript
Dino Android (Click to see the animated GIF version):
Dino Android
			
		"
AndroJava,"
			
				Ilam CTF has been hold on 23rd Nov 2018. Unfortunately I’ve planned other things for 22-23 Nov 2018 and because of the delay in holding the CTF, I couldn’t attend this CTF.
However, I could download the Android Reverse question for future analysis. And the flag is here:
ilam_ctf_0a095194dbcf4f798751aaafdfb_1db6b2ed339f4698b6b38b5e7ae
But the WriteUP!

Start to Android Reverse WriteUp
I’ve installed it on an emulator and the application crashed.
IlamCTF 1
I’ve analyzed the crash logs and found an arithmetic exception at MainActivity:
IlamCTF 2
Using APK Studio and JADx I’ve found and fixed the division be zero which was put in the code.
IlamCTF 3
After that I’ve found that the key was hidden in some functions, in which they are playing with an initial String (aWxhbV9jdGZfM).
IlamCTF 4
Analysis
Then I just copied the code of functions to my Java editor and started to play with them.
IlamCTF 5
The result was something like this:
IlamCTF 6
As you see, the results from f3 start to change in characters. I mean, they all looks like base64 till f3 but then, they change to something odd.
I’ve checked the functions. All the functions change a part of input string and add a new part to it. I though that it was an encrypted string but I did not found any cryptographic function call or even dynamic call inside the code. Then the Key should be Base64 Encoded!
The Flag
As a simple test, I just put the parts together and decoded them.
Voila. The flag was in there:
IlamCTF 7
There was just a point. They have added an extra part to the base64 encoded text which I removed it. You can find the extra part at Yoyo.yo function which ends with an arithmetic exception.
Therefore, the flag is:
ilam_ctf_0a095194dbcf4f798751aaafdfb_1db6b2ed339f4698b6b38b5e7ae
The original APK is attached here for who may interest.
Download Ilam CTF Android Reverse APK
			
		"
Media,"
			
				I’ve posted about creating a media home system using Kodi sometimes ago.
After that I configured Kodi on my Laptop and Smart phone which they use the same database shared in home network.
Now, with the help of a small TV card, I’ve added live TV feature to the whole media home.

Media Home
I download and save the movies, TV series and musics to my Home LAN which can be shared over the Home Network. For this aim, I use a NAS server attached to my Home LAN. Previously, I’ve wrote about creating a media home system using Kodi. Now I added the Live TV feature which DOES NOT USE INTERNET for watching Digital TV. Following is a picture of a small part of Home LAN.
Home LAN [NAS Server]
Installing TV card
One of the ways is that to use Windows to decode the digital TV signals and share on the network. NextPVR did a well job on that. You can use the sharing server in Windows and receive the decoded stream in any attached Kodi client. But for my TV card, NextPVR cannot detect it in Windows 10. It is related to the drivers which are not compatible. So Linux helps everywhere.
Kodi 2
Using Linux as Decoder
Ubuntu Linux detected automatically my TV card and mount it at: /dev/dvb/adapter0/frontend0
First of all I tried to use it on Linux to test if it is working or not. I used MeTV as the client. The result was successful.
MeTV player
Setup the Streamer
The next step was to find a streamer server which has a client in Kodi too. With a small search I found VDR tool. The next steps are very straight. VDR VNSI was the tool I installed. The steps I’ve followed was from Kodi Help Center.
Final Step
Final step was the installation of VDR VNSI addon in every Kodi client I had. In the configuration I just entered the IP address of VDR server. Everything is OK. The TV and Radio ability is added to Kodi.
I just recorded a video of all features I’ve added to Kodi.

			
		"
Conference,"
			
				
I recently had a talk about BitCoin and mainly BlockChain technology at Application of New Generation Technologies Session which was held on 7 Dec 2018 in Urmia.







Topics Around BitCoin and BlockChain



I started my talk by introducing myself and how I met the Anonymity Networks, BitCoin and BlockChain technologies. The main reason was the Operation Onymous. 



My talk was made up of two parts: BitCoin which I did not talked in details and the BlockChain which I was talked a bit more with some details.



The talk continued about the attacks, which distributed networks are faced with, 



The slides can be found on SlideShare and the video is here:






			
		"
Anonymity Networks,"
			
				
In a “Socks Rocks! The Good, The Bad and The Ugly” post, I wrote about configuring OpenVPN, TOR and Proxifier in order to hide the real IP and use web sites such as Google which do not allow lots of services for TOR exit nodes.



Literally, the ugly is removed from the previous post and openvpn directly connects to socks.







The Problem



When using the Internet, one may want to use TOR for surfing the net. The problem arise here where some sites block access to the site from the TOR network, more specifically they block the IP addresses of the EXIT Nodes, sites such as Google or CloudFlare or (optionally) BlockChain Wallet.



Previous Solution



Previously, I published a post about how to configure proxychains to tunnel the traffic between client (PC) and VPN Server (openvpn). Proxychains is a tunneling software for flowing the traffic through proxy servers; in this case TOR socks address where the TOR runs. Usually this address is 127.0.0.1:9050 or 127.0.0.1:9150.



The Problem with ProxyChains



I have faced connection problems where if for some times you do not use the Internet, proxychains will disconnect the traffic between PC and openvpn server. For solving this problem I made an infinitive ping request, so the connection is alive all the time.



Better Socks Rocks



A better solution I’ve found recently is the built-in support of proxifying connection in openvpn client. But you should use the default client, not the limited ones that published by others.



The following pictures shows the Settings in openvpn and the configuration for using TOR.



OpenVPN Settings



Proxy Settings in OpenVPN Client



OpenVPN connects to TOR socks port.



Result



If you want to use TOR but do not want to get restricted connection, you can connect to openvpn server through TOR Socks5 proxy. Now your real IP is hidden from openvpn server (and the sites you visit them) but the exit node is not TOR but it is OpenVPN.



It is reasonable to got an increase in reply time of packets. As an example I get 300-400 ms time in pinging 8.8.8.8
			
		"
Anonymity Networks,"
			
				
In this post, I will talk about configuring an Email server which is accessible using TOR. Using TOR will make its IP to be hidden, also accessible if it is behind NAT (inside a home computer without a public IP). But the main question is why one should use this kind of scenario?



Many people may not trust messaging services such as Telegram or WhatsApp but want to have their own private communication system. In this tutorial, you can run your own mail server in your home LAN and access it through Internet without spending money for public IP or VPS.



For the email server part, I will use hMailServer, an open source email server developed for windows.







Installing Email Server



hMailServer is a straight forward email server with built-in SQL Server.  I’ve installed it and shared the screen shots below.



hMailServer Installation Process 1 hMailServer Installation Process 2 hMailServer Installation Process  3 hMailServer Installation Process 4 hMailServer Installation Process 5 hMailServer Installation Process 6 hMailServer Installation Process 7 hMailServer Installation Process 8 hMailServer Installation Process 9 hMailServer Installation Process 10



Configuring Email Server



In this section, I configure the hMailServer with the following configuration:



Creating a self-signed certificate (for IMAPs and SMTPs) SMTP with SSL/TLS (port 465)IMAP with SSL/TLS (port 993)Disabling hMailServer access to Internet (Only has access to 127.0.0.1)Creating a fake domain (tajbakhsh.fake) for email accounts



 Creating a self-signed certificate 



Using  IBM Knowledge Center , you can create certificate and private key which will be used in hMailServer:



openssl req -newkey rsa:4096 -nodes -keyout key.pem -x509 -days 3650 -out certificate.pem



Adding Certificates to hMailServer



SMTPs and IMAPs



The configuration for ports, certificate and protocols are depicted below.



Configuring SMTPConfiguring IMAP



Disabling hMailServer Access



You may follow wikihow for disabling a program (hMailServer.exe) from accessing the Internet. Just add an Outbound rule for hMailServer.exe and select block in connection section.



Firewall #1 Firewall #2 Firewall #3



Creating Fake Domain



The Email server is accessible only in the LAN (but from Hidden Service of TOR), therefore domain is not important, but hMailServer needs for distinguish between the users. Therefore I added tajbkahsh.fake as the domain of Email server.



Adding Domain #1Adding Domain #2Email Account #1Email Account #2



Configuring Hidden Service



As I described before in “Control your home IoT” post, you can run a hidden service. In this scenario, there is one onion address with two ports: One for IMAPs and the other for SMTPs. The configuration are below:



torrc fileAdding ports to torrcAfter running TOR, the address can be found in Hidden directory



Conclusion



In this post, I’ve configured hMailServer as email server behind TOR as a hidden email service. In the next post, I will describe how to connect to this hidden service from PCs.
			
		"
Anonymity Networks,"
			
				
In the previous post, I’ve talked about configuring a hidden email server using hMailServer. In this post I will talk about how to access this hidden Email server. I’m using ThunderBird as email client, tajbakhsh.fake as the fake domain of email server (and accounts), two users ([email protected] and [email protected]).



During all the processes, I assume that the email server is configured as previous post and client has access to the TOR network.







Installing ThunderBird



ThunderBird installation is straight forward. Just download the binary from  ThunderBird  and start installation process. The next step is the installation of TorBirdy addon for ThunderBird which allows to tunnel the traffic of ThunderBird through a SOCKS proxy. The installation steps are depicted in the following pictures:







If you need further information about addon installation process, please refer to Mozillazine.



Configuring Addresses



After installing TorBirdy and adding a new email address, you should configure the correct onion addresses for the ThunderBird from Tools -> Accounts section. For the IMAP and SMTP section, add the onion address of the hidden email server which is generated previously.







If you want to more configure TorBirdy, just click the Green text in the right (below) corner of the ThunderBird.







at the end, Connecting to The Hidden Email Server



After setting the onion addresses, the connection process can be start by just clicking Inbox icon in the newly configured email address.







Same process should be taken to send an email. Beside, I took hMailServer logs beside ThunderBird to show the connection logs inside hMailServer.




			
		"
Anonymity Networks,"
			
				
My project as Onion Harvester is accepted in OFFSECONF 2019. Onion Harvester is one of the projects I’m working on it partly. I give a brief presentation about working mechanism of TOR Network and talked about hidden services.







After that, I talked about computations and resources needed in order to find all the addresses.



I uploaded the video to My YouTube channel and here are some of the photos.







The video is here:





Onion Harvester
			
		"
Anonymity Networks,"
			
				
I notified that the exit node IP address in the TOR browser is not the real exit node IP. Then I started to drive the mystery machine for investigating the case. Real IP! Where are you?







Motivation for Scooby Tor!



Someone in Twitter asked me an interesting question which I wasn’t noticed before. The question was:



Why the IP address which is shown in whoer is not same as the exit node which is shown in TOR Browser?!Shadow



Therefore I started to investigate the cause which was very interesting.



I think this problem has a similar situation of the Scooby Doo series. There is an unknown subject (the IP address displayed in whoer), the bad guy behind the ghost mask (the IP address shown in TOR Browser) and the clues!



The Question



In the first step, I myself checked the case in order to see the task and verified. I tested with whoer and whatismyip. The results are the same.







The Steps



We now faced the ghost! and Scooby started to fear of the case. But with the help of Velma, they started to collect the clues.



The first think that I did, was finding the exit nodes of Tor in other way. I connected to TOR control port using telnet, but I had to define a password for connecting to it.



Adding Password to TOR Control Port



Using the following command, one can generate a hashed password for TOR:



tor --hash-password password > pass.txt



Then enter the VALUE inside pass.txt to the TOR config file, torrc which is inside the TOR Browser folder if you’re using windows or in /etc/tor if you’re using *nix systems, as the following:



HashedControlPassword VALUE



The VALUE is something like 16:HASHEDVALUE. Now you can restart TOR and connect to TOR control port or use the charming python script in order to display the list of exit nodes. Credits go to TOR stack exchange. But I’ve changed some parameters:



First of all changed the control port from 9051 to 9151 which is the default port for TOR control port.Then added my password to the authenticate() functions.Run the script



All the things are OK. The ghost IP address is changed but you can see the list of exit nodes. Here is the proof:







Therefore, TOR creates multi circuits and use them as the connection manager. But the circuit which is used for displaying the exit node to the user may not be the same as real exit IP address.
			
		"
AndroJava,"
			
				
 My Contribution in K9 Android Mail Client 



My Contribution in K9 Android Mail Client



K-9 is an attractive, open-source email client for Android with support of IMAP, POP3, SMTP, and exchange protocols. Hence, this client does not support proxy feature. This problem is referenced in #704 #980 #2619. In this post I will talk about my contribution in K-9 project by adding SOCKs proxy feature, which can be used for connecting hidden mail services.



In previous post, I described about connecting Thunderbird, an open source email client for PC, to a hidden mail service. In this post I will talk about modifying K-9 mail and connecting Android client to the hidden mail service.







Problem Definition



Despite K-9 mail client is very powerful, it does not support SOCKs proxy feature. SOCKs proxy can be used for accessing the Internet in some special cases such as in schools, universities, or accessing TOR network.



By adding SOCKs proxy, one can connect to hidden mail services or to normal mail services by hiding his real IP address.



My Solution



I have worked with TOR hidden network and programming sockets in order to be connected through TOR network. You may check my answer in TOR stack exchange.



Therefore I just forked K-9 mail project into Mr Tajbakhsh github and worked on adding SOCKs proxy feature. I added a user interface part and modified the main connection source code.



Modifications



You can check the full list of modifications in github link. But there are two parts: one for the UI and one for the connection part.



UI Part



app/core/src/main/java/com/fsck/k9/K9.java app/core/src/main/java/com/fsck/k9/preferences/GlobalSettings.java app/core/src/main/java/com/fsck/k9/preferences/Settings.java  app/ui/src/main/java/com/fsck/k9/ui/settings/general/GeneralSettingsDataStore.kt  app/ui/src/main/res/values/strings.xml  app/ui/src/main/res/xml/general_settings.xml 



Connection Part



 mail/protocols/imap/src/main/java/com/fsck/k9/mail/store/imap/ImapConnection.java  mail/protocols/pop3/src/main/java/com/fsck/k9/mail/store/pop3/Pop3Connection.java  mail/protocols/smtp/src/main/java/com/fsck/k9/mail/transport/smtp/SmtpTransport.java  mail/protocols/webdav/src/main/java/com/fsck/k9/mail/store/webdav/WebDavStore.java



Connecting to Hidden Mail Server



I previously configured a hidden mail server using TOR and hMailServer. In another post, I described about connecting to the configured hidden mail server using Thunderbird.



Step 1: Generating The SOCKs Supported APK



The generation of APK is out of scope of this post, but generally you can fork the code from my Github repository and import it to Android Studio to get an APK.



Compiling K-9 mail client with SOCKs proxy support



Step 2: Installing TOR on Android



This step is straight forward. Just install TOR from Google Play and run it.







Step 3: Install and Configure K-9 With SOCKs Support



After compiling K-9 with SOCKs support, you can add email accounts based on Hidden mail server.







Every thing is done. Just start TOR in your Android phone and check SOCKs proxy in K-9 Network Configuration which added.



Conclusion



I added SOCKs proxy feature to K-9, the powerful and open source email client in Android. By using this feature, one can be connect to the email accounts if is behind SOCKs proxy or can be used in order to make a connect to hidden mail service. Enjoy!
			
		"
Academic,"
			
				What is Latent Dirichlet Allocation?
In a general view, LDA is an unsupervised method for clustering documents. It models (purified) documents as bag of words. Also it assumes each word (and document) has a mixture model of topics i.e. each word (and document) may belongs to each of the topics by a probability. It takes number of clusters in the corpus as input then, simply assigns each word in each document a random topic. Then tries for
It was a very general description of LDA.

How it is work?
The process of LDA depends on the bag of words model of documents. First of all there are K topics that is input of LDA (guessed!). We have totally D documents and V distinct vocabulary in the document set. The generative process is:

For k = 1 … K:

φ(k) ∼ Dirichlet(β)


For each d in D:

Θd ∼ Dirichlet(α)
For each word wi in d

zi ∼ Discrete(θd)
wi ∼ Disctete(φ(zi))





This is the total process. But what it means?
Dirichlet
In simple words, Dirichlet is a probabilistic distribution that has K concentration parameters. Each parameter (α) is a random number greater than zero (α > 0). Following is an example of Dirichlet distribution for 20 documents with 4 topics. Parameters for this example (α1 = 10, α2 = 5, α3 = 3, and α4 = 20).

φ(k)
This is a Dirichlet distribution for the Kth topic. The φ is a KxV matrix where each element is the probability of belonging the vth word to the kth topic.

Θd
Similarly the Θd is a Dirichlet for the document d. It shows the belonging of the document to each of the topics.
Finally
The process is as below in simple words:

For each topic:

Randomly initialize belonging probability of each word in vocabulary to the topics.


For each document:

Randomly initialize belonging probability of current document to the topics.
For each word:

Choose a topic from Θd (zi)
Randomly choose a new word from φ(k) where k is the selected topic in the previous part.





The last step, helps us to find words similar to the current chosen one to be in same cluster.
In the next post, I will explore the mathematics behind the LDA. Any comments?
			
		"
Personal,"
			
				Now posts from my site will be appear on my Twitter, LinkedIn, and Telegram channel.
			
		"
Academic,"
			
				In the previous post (Latent Dirichlet Allocation),  I’ve described the LDA process and how it can be applied on documents.
In this post I will explain how the probabilities can be estimated using collapsed Gibbs sampling.
Lets start with the LDA Probabilistic Graph Model.

Where W is the sampled word from document, Z is the topic assigned by Document (d), θ is the Dirichlet distribution of d, α and β are the input of Dirichlets. More info about hyperparameters can be found this link.
So the only known variables are α, β, and w. All others (z, θ, and φ) are unknown. So based on the LDA graph we have:
p(w, z, θ, φ | α, β) = p(φ|β) p(θ|α) p(z|θ) p(w|φz)
The right side of the above conditional probability can be reached by the probabilistic graph model where each variable only depends on its parent nodes.

Inference
In LDA the we want to estimate latent variables (z, θ, and φ) based on known ones (α, β, and w). Thus we have:
p(w | α, β) can not be computed directly. So Gibbs Sampling is used to estimate latent parameters.

Collapsed Gibbs Sampling
Gibbs sampling is used to estimate p(x) = p(x1, …, xn) where there is no solution for p(x) but there are some forms of conditional probabilities. This method can be applied to LDA but there is a more simpler way to do this.
θ and φ can be calculated based on z where   and . In simple: θ is fraction words in document (d) where belong to the topic(z) and φ is the fraction of word (w) that belongs to topic (z) in the documents that w appeared in them.
So θ and φ can be out of computations. then we have to estimate: 
Bayes conditional probability rules are coming: 🙂

Likehood and prior can be calculated easily. The computation process can be done by means of Expectation of Dirichlet distribution. For more information check these slides.
			
		"
Academic,"
			
				Recently I’ve interested in byte code structure of Java and Dalvik. I’ve found some useful tools for playing with them.
Destination Byte Code
Java byte codes are simple to reverse engineering because they compile in run time. i.e. JVM will execute the byte codes in run time, thus Java code is cross platform but executes with more delay than direct compiled machine codes (for example using C++ and gcc).

Compiling from Java Source Code
Reversing Java byte codes are simpler than reversing machine codes. Oracle has a documentation about byte code in Java. In Java each source file (.java file) will be compile to a class file (.class) using the following command:
javac HelloWorld.java
This will create the HelloWorld.class file in the same folder where Java code exists. You may use Java’s default reversing tool (javap) for paying with class files.
Result of execution of javap HelloWorld.class
Compiled from ""HelloWorld.java""
public class HelloWorld {
public HelloWorld();
public static void main(java.lang.String[]);
}
If you prefer more verbose results (javap -v HelloWorld.class):
Classfile HelloWorld.class
Last modified Aug 28, 2016; size 426 bytes
MD5 checksum 90469fd7405d19947ba6e767de8a8b5f
Compiled from ""HelloWorld.java""
public class HelloWorld
SourceFile: ""HelloWorld.java""
minor version: 0
major version: 52
flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
#1 = Methodref          #6.#15         //  java/lang/Object.""<init>"":()V
#2 = Fieldref           #16.#17        //  java/lang/System.out:Ljava/io/Prin
tStream;
#3 = String             #18            //  Hello World!
#4 = Methodref          #19.#20        //  java/io/PrintStream.println:(Ljava
/lang/String;)V
#5 = Class              #21            //  HelloWorld
#6 = Class              #22            //  java/lang/Object
#7 = Utf8               <init>
#8 = Utf8               ()V
#9 = Utf8               Code
#10 = Utf8               LineNumberTable
#11 = Utf8               main
#12 = Utf8               ([Ljava/lang/String;)V
#13 = Utf8               SourceFile
#14 = Utf8               HelloWorld.java
#15 = NameAndType        #7:#8          //  ""<init>"":()V
#16 = Class              #23            //  java/lang/System
#17 = NameAndType        #24:#25        //  out:Ljava/io/PrintStream;
#18 = Utf8               Hello World!
#19 = Class              #26            //  java/io/PrintStream
#20 = NameAndType        #27:#28        //  println:(Ljava/lang/String;)V
#21 = Utf8               HelloWorld
#22 = Utf8               java/lang/Object
#23 = Utf8               java/lang/System
#24 = Utf8               out
#25 = Utf8               Ljava/io/PrintStream;
#26 = Utf8               java/io/PrintStream
#27 = Utf8               println
#28 = Utf8               (Ljava/lang/String;)V
{
public HelloWorld();
descriptor: ()V
flags: ACC_PUBLIC
Code:
stack=1, locals=1, args_size=1
0: aload_0
1: invokespecial #1                  // Method java/lang/Object.""<init>
"":()V
4: return
LineNumberTable:
line 1: 0
public static void main(java.lang.String[]);
descriptor: ([Ljava/lang/String;)V
flags: ACC_PUBLIC, ACC_STATIC
Code:
stack=2, locals=1, args_size=1
0: getstatic     #2                  // Field java/lang/System.out:Ljav
a/io/PrintStream;
3: ldc           #3                  // String Hello World!
5: invokevirtual #4                  // Method java/io/PrintStream.prin
tln:(Ljava/lang/String;)V
8: return
LineNumberTable:
line 3: 0
line 4: 8
}
Reversing Byte Code
When you open the class file using hex editor, you will see some bytes.
But how javap can get all the information from these bytes? This is where reversing begins …

Each class file has the following structure:
ClassFile {
u4 magic;
u2 minor_version;
u2 major_version;
u2 constant_pool_count;
cp_info constant_pool[constant_pool_count-1];
u2 access_flags;
u2 this_class;
u2 super_class;
u2 interfaces_count;
u2 interfaces[interfaces_count];
u2 fields_count;
field_info fields[fields_count];
u2 methods_count;
method_info methods[methods_count];
u2 attributes_count;
attribute_info attributes[attributes_count];
}
We will go through the byte codes step by step. Today we analyze some basic parts:
Magic
As you see, the first bytes are ca fe ba be where java uses CAFE BABE as its magic for declaring class file.
Minor and Major
The next four bytes 00 00 (0 in decimal) and 00 34 (52 in decimal) shows the minor and major versions. I’ve compiled the code with Java SE 8, so you can’t run the code with Java SE 7.
So the minor version in 0 and major version in 52.
Constant Pool
Constant pool is where all the constants used in the class file are stored in it. the next two bytes shows the constant pool size (00 1d = 29 in decimal). The 0th item is for JMV so the items are in constant_pool[1] to constant_pool[28]
Continue Reading from secound part:

Reversing Java: Part II

			
		"
Academic,"
			
				Offsec is an Iranian computer security group which holds conferences or CTFs in the computer security area. In their recent challenge, they created a web challenge which is accessible through offsecmag Telegram channel. The challenge started on 16 Dec 2016 and here I will WRITE UP! 🙂
From: https://orig00.deviantart.net/2c10/f/2014/227/3/0/ctf__capture_the_flag____logo_by_doppleredm-d7v8iyz.jpg
In this post, the write up of the challenge is presented.

Write Up
The question was simply started with only one hyperlink.
OffSec Web CTF
Stage 1: Find the Start Point
The link points to https://offseclabs.ir/start_challenge.php. In the link, there is only some lines of texts:
OffSec Web CTF
So, It says Don’t be afraid of empty pages. We’ve started to test the common web attack interfaces:

Web App Parameters: Which there is not any parameters in start_challenge.php (The body part of HTTP Request)
Web Server Misconfiguration or Related Exploit: Which was sent in HTTP Header part. (Server is Apache/2.4.18 (Ubuntu) which there is not known vulnerability till the question period)
Web App Parameters in Header: In which cookies are the main parameters.

None of the above were inside the start_challenge.php, but the page says that do not be afraid of empty pages. So we need to find an empty page! 🙂
We’ve tested some common pages including:
http://offseclabs.ir/index.php
http://offseclabs.ir/robots.txt
http://offseclabs.ir/sitemap.xml
http://offseclabs.ir/rss/
index.php was suspicious. There was no content on the answer page. Again we’ve checked the cookies. Voila! The first stage is done. There was a cookie which will guide us!
Stage 2: Getting deeper, to the source!
The cookie was:
Always_pay_attention_to_cookies = php%7E
OffSec Web CTF
The cookie had a url encoded value. php~ was the decoded one. We have reloaded the pages with several different (and vulnerable) content. There was no change in the answer. So we’ve tired up and tried another way.
As mentioned above the server is a Linux based server. ~ in *nix based systems has two main meaning:

It is used for $HOME_DIR of the user.
It is added to the end of files which are currently editing. For example if you are editing foo.bar text file, there will be foo.bar~ hidden file on the system too!

Voila! The second stage is done. We’ve tried start_page.php~ (which returned 404 – Not Found) and index.php~ (which returned the index.php source code!) 🙂
OffSec Web CTF
Stage 3: goto /admin!
The code is clear some how. It says you send two post parameters namely (__u and __p), the web application will use __u as user name and SHA-1(__p) as password.
There are two user types: guest and admin.
The password for guest is simple to guess. SHA-1(guest) = 35675e68f4b5af7b995d9205ad0fc43842f16450
But SHA-1(admin) <> 64ef3b1ee2815ab80b0741696c41f08925b4a703
So we searched web for cracking the hash. The hash could not be cracked through common services. In the start_challenge.php, it is said to keep tying which means may be SHA-1 calculated recursively.
SHA-1(SHA-1(…(KEY)…))
We have collected a list of KEYs for the admin, including the hyper link, information from Domain, from the certificate and … We have applied SHA-1 over 1000 times on the KEY list, but no one cracked the password.
As the developer used === for comparing the results of SHA-1(__p) and ’64ef3b1ee2815ab80b0741696c41f08925b4a703′, PHP weak type vulnerability could not be applied. For more information about this vulnerability please refer to SANS Penetration Testing Website.
We’ve tested the /admin link with guest user. As we expected, the result should not be accessible by a simple guest user.
OffSec Web CTF
But there was a very interesting header in HTTP response from server.
OffSec Web CTF
The header may not control the content loaded from the domain. By default browser denies loading contents from different domains than the page’s domain. Some domains allow loading content from other domains for some usages such as loading content from CDNs. If the CDN does not check the domain correctly, it may load contents which the requester is not authorized. This vulnerability is named CORS (Cross Origin Resource Sharing). You may check detailed information from these links: Link 1     Link 2
Stage Three and Half: CORSing the admin!
In the index.php~ there is a link which is passed using __check_link GET parameter. We have created a web page for it and loaded a java script to send a request to the /admin and send back the response to us. We have passed the link to index.php and the page said that the admin will visit our link!
OffSec Web CTF
Voila! Admin visited our link and the content loaded for the admin, thus for us!
The content was the flag!
OffSec Web CTF
Because of our curiosity, we have checked some other headers. First the User Agent says that the UA is PhantomJS which is a famous headless web kit (or the admin who visited the /admin by our java script request).
The second interesting header was the IP of the admin (37.59.138.205) which is the same for offseclabs.ir, We’ve loaded the page with IP to check if offseclabs.ir is a vhost or not. It was a vhost and the returned content was:
OffSec Web CTF
As it is seen, it says lab-cors1-chall! Now we ensured that the CORS was the main challenge. Therefore the flag was:
offsec{pay_attention_to_cors_:D}
Thanks OffSec for the interesting challenge.
			
		"
Cryptocurrency,"
			
				I’m interested in movies and visit lots of movie sites. Recently I visited a site called YIFYTORRENTS in which I found a bitcoin miner in the site! In this post, I write about how I found the miner and how it acts.
BitCoin Miner 1

1-Visiting the site
I visited YIFY-Torrent.me and suddenly Firefox asked for firewall incoming connection request. The site was good looking. It has valid certificate and uses HTTPS for connection, but why it asked for firewall exception?
Bitcoin Miner 2
So I disallowed the request and continued to investigate the site.
2-Miner Found
I started to investigate the HTML source code of the site and found a bitcoin miner inside it! The picture below shows the miner code.
Bitcoin Miner 4
Further, I checked the code for the miner. It is in this link and as it is shown, it is obfuscated and started with eval command.
Bitcoin Miner 5
Bitcoin Miner 6
Checking with Addons
I also checked the site with NoCoin addon for Firefox and fortunately it could detect the miner.
Bitcoin Miner 3
Update
I’ve checked the site on 11 Mar 2018 and writing the post on 18 Mar 2018. But luckily COMODO has detected and blocked the site.
Bitcoin Miner 7
			
		"
Personal,"
			
				Barnamak WriteUp
Two weeks ago, SharifCTF was hold and the questions were acceptable. We attended with CGU team name and and gain the 44th place among the 682 attended teams, whom has at least one question solved in the CTF. In this post I described the writeup for the question about reverse engineering of Android app with 200 points (the 3rd question of reverse section).
Sharif CTF 1

The App
The app for the question is available for downloading, however, you may download  this link if you like. By the way, the task name was barnamak.
In the first step, I installed it on an emulator to watch what it wants.
adb install Find_Flag.apk
Sharif CTF 2
Sharif CTF 3
Step One
It said that “Waiting For A Lock…” and the location icon started to blink. So probably it waits for location. I gave it a try by setting a location.
Sharif CTF 4
It is OK. The app got the location.
Sharif CTF 5
I’ve pressed STEP ONE and got the message: “Please try again …”
Sharif CTF 6
So it is worth it to investigate around it. After that I decided to check the source code for the app. The famous DEX2JAR and JD-GUI helped me alot.
I’ve convert the APK to JAR file using dex2jar:
Sharif CTF 7
And opened with JD-GUI:
Sharif CTF 8
I’ve found that the piece of code when the button pressed is located in b() in com.challenge_android.fragments.ChallengeFragment.class where the code is:
Sharif CTF 9
It says j = 0x2C = 44 and i = -0x5B = -91. Then it checks the input location:
if (((int)this.location.getLatitude() == j + 1) && ((int)this.location.getLongitude() == i - 2))
Therefore, the latitude of location should be j+1 = 45 and longtitude should be i-2 = -91-2 = -93
Posting these values made a change in app. I did another thing. The app checks rootability of phone using com.challenge_android.a.c class and some things happen inside it. So I’ve changed my phone to be root. The com.challenge_android.a.c.c checks the existence of a folder named /dev/com.koushikdutta.superuser.daemon/ and I created the folder and got ROOT :).
Sharif CTF 11
 
Sharif CTF 10
Step Two
After that app suddenly closed. The final thing was omitting the application termination.
Sharif CTF 12
The noisy code was at com.challenge_android.fragments.ChallengeFragment.a() that can be bypassed by smali code injection and removing the part of code. For more information about smali code injection, you may follow my post about the subject.
Voila! The flag appeared.
Sharif CTF 13
Flag is MD5 Of Longtitude: SharifCTF{MD5(-93)} = SharifCTF{87a20a335768a82441478f655afd95fe}
			
		"
Media,"
			
				As I told in About Mir Saman section, I love classical musics. I used to listen to online classical radios which are broadcasting the musics  24×7. I was wondering how these services are working. In this post I will show you how to create an online radio broadcast station from your computer.
There are two main concepts in broadcasting live audio to the web users: Source and the Broadcaster
The concept is shown in the following figure. The source (such as Mixxx)will create raw/encoded media stream and will send it through web requests to the broadcaster (such as icecast). The broadcaster will store the stream temporary and then push it to the audiences. Audiences will download the stream from web and will pass it to a player (such as VLC) to be played.
Internet Radio1
The source will receive the voice/sound from input and stream it using PUT HTTP method to the streamer server. The streamer will buffer the received voice/sound in its buffer and will stream to whom already started downloading the stream. It is normal that audiences receive the sound/voice with 5-15 seconds delay because of buffering of streaming server (from source) and buffering in audiences (from stream server).
The delay is just like the delay of videos in YouTube or other video services before starting video play.
In this example I’m using Mixxx as the source, IceCast as the stream server and VLC as the audience client. I’m working on Ubuntu 16.04 x64 LTS as the stream server.
IceCast as the Heart (the Broadcaster)
Icecast is the heart of the Internet Radio. You can install it using the following command:
sudo apt install icecast2
Internet Radio
After installation process is done, IceCast asks you to be configured. The configuration steps with default values are shown in the following pictures:
   One of the main configuration passwords is the source password, which is used by source to authenticate itself, else every one can use your stream server to broadcast themselves. 🙂
The other password is admin password which is used to access the administrative panel of IceCast through its web interface.

All of the settings can be configured through IceCast configuration file located at /etc/icecast2/config.xml:
Configuring Mixxx
Mixxx can be installed using the following command:
sudo apt install mixxx
After that Mixxx can be run by typing mixxx in terminal or using Desktop environment:
There are two main configuration:

Microphone
Stream Server

Configuring Microphone
In Options menu, click preferences. The first item is the input/output configuration. You can select your microphone device for the input. The settings are depicted in the following figure:
Configuring Mixxx
Configuring IceCast in Mixxx
In the Options menu, click preferences. The last item is the live broadcasting settings, which is depicted in the following figure:
Configuring IceCast in Mixxx
Everything is OK. After clicking Apply/OK in configuration, Mixxx should show “Connected to the stream server successfully!” or a similar success message. Detailed configuration is described in Mixxx documentation page in this link.
Now play music in Mixxx and your audiences will receive the output of Mixxx (sound/voice).

Internet Radio using Mixxx and IceCast
Internet Radio using Mixxx and IceCast
Internet Radio using Mixxx and IceCast
Internet Radio using Mixxx and IceCast

Now it is needed to configure the audience with VLC to start streaming. Each of your clients can find a link in right top corner of the IceCast web interface named M3U and contains a link like http://YOUR-ICECAST-SERVER-IP:8000/stream
Internet Radio using Mixxx and IceCast
Start Broadcast
Copy that link and return to the VLC. Click Media > Open Network Stream and paste that link in it and click play. If you want to save the stream, just right click on the stream in the playing list, and click save > dump raw output.
Internet Radio Audience using VLC
Internet Radio Audience using VLC
Internet Radio Audience using VLC
And voila! Start broadcast your voice to the world!
			
		"
AndroJava,"
			
				This the second and final writeup of Android challenges which was given in 8st Sharif CTF. I’ve wrote about the team and place in the 8st SharifCTF Android WriteUps: Vol I. The writeup begins …
Skeleton 1

Installing Skeleton
Just like any other question, I’ve installed the app to look what it is like. The virtual device was a API19 Android emulator. As you see, the skeleton laughs at me!
Skeleton 2
And there is no other activity, button, request location, etc. appeared in the app. I should mention that this question was in MISC section.
Looking The Code
I followed the instructions in  8st SharifCTF Android WriteUps: Vol I post to investigate inside the source code of the app. Again JD GUI, Dex2Jar and APK Tool helped me.
Skeleton 3
The app has only MainActivity and inside, it loads a Scalable Vector Graphics image into the web view. SVG images are built on vectors, therefore they can be zoomed in and zoomed out without loosing the quality.
The best editor I know for editing SVG images, is Ink Scape.
The SVG
The only attack vector (if I can say) available was the SVG image. I started to investigate the SVG. Using APK Tool, I extracted the logo.svg file.
SVG Structure
SVG images are mark up files just as HTML or XML in which vectors are defined. So, I opened the logo.svg with a text editor.
Skeleton 4
As I taught, InkScape was used to make (or edit) the Skeleton.
The Writeup
I investigated more on the markup and found an interesting point. There are two graphics inside the image: one with the id layer1 and the other is text4146.
Skeleton 5
But we only see one graphics: the skeleton with some paths. The other graphics text4146 is suspicious. Therefore, I opened logo.svg with InkScape.
Skeleton 6
By moving the laughing skeleton, I’ve found text4146.
Skeleton 7
Voila, by zooming the text4146, flag is visible.
Skeleton 8
The flag is:
SharifCTF{be278492ae9b998eaebe3ca54c8000de}
Skeleton
Have fun!
			
		"
Anonymity Networks,"
			
				I recently established a wired connection into my server through my computer. I’ve mixed the protocols (OpenVPN, TOR, SOCKS) to RE-ANONIMIZE myself! I’ve put “The Good, The Bad and The Ugly” name on the scenario. Here is a very good picture of it!
Good, Bad, Ugly

The Motivation
Recently, I had some problems with my ISP in connecting my OpenVPN AS free edition on my VPS. The ISP blocked my connection to my VPN and I couldn’t find any solution to this, hence I started an investigation on this matter.
What Cause the Blocking?
Probably the ISP blocks my connection in Network layer when it sees OpenVPN protocol (or port number) in the packet. So the problem is not in the OpenVPN (the GOOD).
I must find a way to bypass the ISP
In other way, TOR is another tool for surfing the web with anonymity, but, it cause lots of problems when accessing sites such as Google, YouTube and etc. using TOR Browser.
You can run TOR and set a SOCKS proxy in your desired browser in order to pass some javascript limitations which are set in TOR BROWSER, but the problem with sites such as Google still remains, then TOR is BAD.
Therefore, TOR can be used for bypassing ISP but TOR is BAD.
The Ugly (for SOCKS)
If I could connect to my VPN Server through TOR, my exit address would be my VPN Server’s and the problem with sites such as Google would solve. It is where I’ve found Proxifier, The UGLY.
Proxifier as ProxyCap or SocksCap is a software to pass whole the traffic of the system through a proxy. And voila! It is the solution. OpenVPN itself is an application which makes a TAP driver for windows and pass the system traffic through the TAP.
The Steps

Start TOR and connect to TOR network
Start configure Proxifier for using TOR. If you use OBFS or FTE, do not forget to exclude them from proxifier to make their connection DIRECT, not through the proxy.
Start OpenVPN GUI client and connect to VPN.
Start an infinite ping and enjoy using the Internet.

Actually the speed may be slower than the direct connection, but it is good if you do not download large files.
TOR
Proxifier
OpenVPN
OpenVPN Connected
AND VOILA!
SOCKS Rocks
The steps are depicted in the following picture:
Socks Rocks
The final Remark
If you do not use vpn application after connecting to it, Proxifier will drop the connection and reconnecting cause problems. Therefore after connecting, start an infinity ping in order to make the VPN application connected.
			
		"
Anonymity Networks,"
			
				I’ve started a project named Onion Harvester for finding the Onion addresses in TOR hidden services which are not exposed by the owners. I believe that the real dark markets and interesting stuff of TOR networks relies in the dark.
DarkNet Markets

Dark Market?
I was always curious about what are the dark markets and what’s going there? If the Internet is transparent, how criminals can work over the Internet? So a search engine for TOR would be OK. But for starting a complete search engine, you must know all the addresses and the point to begin.
Motivation
After that I’ve meet with Anonymous Networks such as TOR, Invisible Internet Project, FreeNet, Tribler, and etc. And I’ve heard about Operation Onymous, which make me excited about how they found the markets Onion links. Some markets were famous such as Silk Road. But I always think that how one could find all the addresses?
The Experience
I was curious that indexed urls in famous Hidden Service Indexers such as thehiddenwiki are truly sell illegal stuffs or they are swindlers? You may use some hidden network search engines like Ahmia.fi or TORCH.
I’ve found some Onion addresses. One of them was live killing operation for killing someone online. If it was true, it would be a sin! So I opened the Onion Address and it a counter in the screen showing 3 days remain to start live torturing and killing! It asked about 0.01 BTC, I can’t remember exactly, for watching the killing operation.
After 3 days, I’ve again checked the onion address and it said that after 3 days we will kill a person live! I’ve checked the HTML source code and I’ve found that it is a simple script for displaying the counter statically. I cannot verify that the killing was done or not (I did not pay), but strongly I guess that the static script was done by a swindler.
Onion Harvester Born …
TOR Spy Services
I’ve started developing the OH project and released the first version in Dec 2017. But the speed was not satisfactory. I published the paper about the OH in APA3 Conf, Zahedan, Iran.
But I could not get the practical way to solve the issue. After that, I started to use of multiple TOR instance in a single PC instead of only one instance and the result was SUCCESSFUL!
Then I re-implemented the Onion Harvester and make it more arranged (MVP, some design patters, some improvements, use of multiple TOR instance).
You may visit the project at my GitHub repository.
Any comment or contribution is appreciated.
			
		"
AndroJava,"
			
				I’ve playing with Android CTF questions recently and found this jewelry box. One of the questions was about a numeric one way hash question named NUMDROID. The question was presented in ASIS2014 and here, I write the write-up!

Find the Numdroid Question
The question was a file of binary data. The first bytes (known as File Signatures) show that the file is a 7ziped file. Therefore I decompressed it and found the files inside compressed file.
FileType
The contents extracted from the file were parts of an APK.
Inside APK
So I zipped the files and signed by a self signed key. For more information about signing APK archives please refer to my previous post about smali code injection.
Make APK
Install is the Magic
First of all, I installed the APK in order to find what does it do. It was a screen with numpad inside and a back-OK keys.
First Attemp
Source Code is Another Magic
For the sake of the byte code, Java code is vulnerable against decompilation  techniques if no obfuscation method is used. The code was clear! I used JADX which is very good decompiler for APK files.
The Code
After a fast overview of the source code, I found that the numeric input is hashed by an algorithm inside the code and checked against a string for being verified. I highlighted the code section for hash function.
The Digest
As it is visible in the isOK function, the password’s length is 7 at maximum.
Capturing the Flag
I’ve checked the next activity which will be shown after verification process. The activity shows MD5 of input number as the flag. Therefore finding the flag is about to cracking the hash function.
There are two ways for cracking:

Crypt Analysis and finding  a way to revert the hashed string to its original value, which is not suitable for this kind of challenge.
Bruteforcing all ranges from 0 to 9999999 and calculating the hash.

I’ve select the second choice and bruteforce the range. For this aim, I’ve write a small piece of java code:
Bruteforce
And converted it to dex file in order to access its smali code.The needed tools are javac, dx and backsmali.
javac
Dexing the class
The Smali
Then I’ve injected the smali code inside the APK and put my bruteforce code inside onCreate() of the main activity. The bruteforce code will write the flag in Log of Android if the hash value is correct.
Bruteforce Smali Code
Calling the Code
Smali Code Injection
The Flag
Finally, after injection, I signed and installed the new APK on the Android Emulator and voila! the result.
Recompile
Sign the injected APK
The Flag
The Flag in Action
The code is MD5(3130110) and thus the flag is ASIS_{3C56E1ED0597056FEF0006C6D1C52463}.
			
		"
Conference,"
			
				
In this post, I’m going to write about the one day cyber-security conference which was held by Urmia University of Technology, named  Protective and Operational Security (P0SCon).







In Urmia University of Technology, we have decided to hold such a conference about cyber-security and so I was attended to Offsec group Conference 2017 in Teharn and  NOPcon2018 in Istanbul.



There I invited some people and they kindly accepted my invitation for attending and making a speech at the P0SCon2018. The conference held on 20 Aug 2018 at Urmia lake research center of Urmia University.



We had the following speaker in our conference:



Amir RasouliHossein LajevardiPouya DarabiNikita TarakanovForough FallahfarBabak Amin AzadKenan AbdullahogluAmir Kiyani



And the following speakers gave a technical session at P0SCon 2018:



Mohammad Amin KarimanMorteza Ramezan ZadehMohhamd Reza Zamiri



Contacting P0SCon



You may follow the news and other stuff of P0SCon from the main site available at: http://www.poscon.ir



And the followings are the official accounts of P0SCon:



Twitter: @p0sconInstagram: @p0sconTelegram Channel: @p0scon



 P0SCon Photos (2018)



P0SCon



Read about the conference at this link 
			
		"
IoT,"
			
				In the “Control your home IoT”, the configuration steps for controlling the home IoT system remotely, are described. In this post I will describe how to control your system graphically!

The main steps for this installation is the same as previous post, including: installing TOR and configuring hidden service.
Here I will describe remote connection using VNC. VNC stands for Virtual Network Computation and is a protocol for graphically control remote servers. Also there is a nice web GUI for VNC named noVNC. I will describe installing vnc4server as VNC server and noVNC.
Installing vnc4server
In this step, just install vnc4server in your home IoT Raspbian:
IoT Raspbian with VNC
$ sudo apt-get update
$ sudo apt-get install vnc4server
Then start the vnc4server using vnc4server command:
$ vnc4server
Then the vnc4server asks you to provide a password with maximum 8 characters.
Starting vnc4server
Installing noVNC
noVNC can be installed using apt-get. You may check this link for more documentation.
Installing noVNC
$ sudo apt-get install novnc
But I prefer launching by their code in GitHub. The commands are from this link.
$ echo y | sudo apt-get install git websockify<br /><br /><br /><br />

$ git clone git://github.com/kanaka/noVNC
Launch without WSS/SSL support:
$ ./noVNC/utils/launch.sh --vnc [IP]:[PORT]
Launch with WSS/SSL support:
$ ./launch.sh --cert /path/self.pem  --vnc [IP]:[PORT]
Cloning noVNC
And Voila! Everything is ready for fire up. Place 127.0.0.1 as IP and 5901 as PORT in the above commands.
$ ./noVNC/utils/launch.sh --vnc 127.0.0.1:5901
Starting noVNC
As you see, it will accept port 6080 from browser and will proxy the input commands to the vnc port (5901).
If you have forgot to start vnc4server, you should start it.
If you forgot the password for vnc, you can reset it by typing vncpasswd in terminal.
The final step is to add TOR hidden services.
I will add the following line to the previously configured torrc file and restart tor:
HiddenServicePort 80 127.0.0.1:6080
The sequence for remote desktop service is as follows:
IoT Raspbian with VNC – Connection Sequence
Every thing is OK. Just start Tor Browser in anywhere and type your hostname (check how to create Tor hidden service in previous post) in Tor Browser.
IoT Raspbian with VNC – noVNC
After pressing Connect button, you should insert password:
IoT Raspbian with VNC – Password
And if the password is correct, you have accessed remote desktop with VNC.
IoT Raspbian with VNC – Done
			
		"
Media,"
			
				Recently, I collected my old Hard drives (and CD/DVD writers) and packed them into my OLD Computer Case in order to create home NAS . Then I’ve installed FreeNAS on it and everything is OK. 🙂
FreeNAS is the simplest way to create a centralized and easily accessible place for your data
Following, the construction steps are presented.

Making Environment for NAS
Here a few words are written about making the environments for making a NAS with FreeNAS and most of the story is told by pictures.
The Old PC
First of all collect all your disks and put them inside your case.
FreeNAS1
FreeNAS2
FreeNAS3
Installing FreeNAS
For the installing phase, I decided to install it on a USB Stick. The following pictures shows the disks attached to the system.
FreeNAS4
FreeNAS5
Final Stage
Create pools as you like and then add disks to them. But as FreeNAS recommended, it is better that the disks in the pools be the same size.
FreeNAS9
And voila! Everything is OK! Enjoy using other features of FreeNAS such as VirtualMachine or Media Streaming even MineCraft server.
FreeNAS6
FreeNAS7
FreeNAS8
For more about funny things you can do with FreeNAS refer to 5 Fun Things to Do with FreeNAS.
FreeNAS10
			
		"
Personal,"
			
				You may have visit SHODAN (The IoT search engine) or ZoomEye (World Wide Port Search Engine). The systems are very useful to have a good view of world! 🙂

But they have restriction for seeing results. For example SHODAN lets for unregistered users to view just 1 page (10 results). If you registered, the limitation is 5 pages. But again restriction!
So what to do?

You can view a good article about these type of engines in this link.
But IVRE, the drunk frenchman
IVRE is a python based, open source search engine for ports. But it is just an interface. The main power resists in NMAP. IVRE import the results of nmap and have a good interface.
How to install it?
You may visit the main tutorial provided by IVRE to the most updated instructions!
IVRE has three module. Scanner, Web Interface, Database server. In its very fast and quick guide, it is suggested to install all of them in one machine.
I follow the instructions in this link on a Ubuntu 16.04 virtual machine.
Firstly  install dependencies:
sudo apt-get -y install mongodb python-pymongo python-crypto apache2 dokuwiki
But a small exception is in the above code -> they may forgot to add libapache2-mod-php which is needed to run PHP codes by APACHE2 in dokuwiki. So I add libapache2-mod-php (and also git + nmap) to the packages.
sudo apt-get -y install mongodb python-pymongo python-crypto apache2 dokuwiki libapache2-mod-php git nmap
After that just follow the steps:
$ git clone https://github.com/cea-sec/ivre
$ cd ivre
$ python setup.py build
$ sudo python setup.py install
And configuration of web server:
$ sudo -s
# cd /var/www/html ## or depending on your version /var/www
# rm index.html
# ln -s /usr/local/share/ivre/web/static/* .
# cd /usr/lib/cgi-bin
# ln -s /usr/local/share/ivre/web/cgi-bin/* .
# cd /var/lib/dokuwiki/data/pages
# ln -s /usr/local/share/ivre/dokuwiki/doc
# cd /var/lib/dokuwiki/data/media
# ln -s /usr/local/share/ivre/dokuwiki/media/logo.png
# ln -s /usr/local/share/ivre/dokuwiki/media/doc
# cd /usr/share/dokuwiki
# patch -p0 < /usr/local/share/ivre/dokuwiki/backlinks.patch
# cd /etc/apache2/mods-enabled
# for m in cgi rewrite ; do [ -L $m.load ] || ln -s ../mods-available/$m.load ; done
# cd /usr/local/share/ivre/web/cgi-bin
# sed -i 's/^\(\s*\)#Rewrite/\1Rewrite/' /etc/dokuwiki/apache.conf
# service apache2 reload
# exit
If you want to view the search engine from your local network, you may face the following screen after pressing help.

Just edit /etc/dokuwiki/apache.conf and change the line:

Allow from localhost 127.0.0.1 ::1
to
#Allow from localhost 127.0.0.1 ::1
Allow from all
And Vola!

Database Initialization
And follow the steps from IVRE:
$ ivre scancli --init
This will remove any scan result in your database. Process ? [y/N] y
$ ivre ipinfo --init
This will remove any passive information in your database. Process ? [y/N] y
$ ivre ipdata --init
This will remove any country/AS information in your database. Process ? [y/N] y
$ sudo ivre runscansagentdb --init
This will remove any agent and/or scan in your database and files. Process ? [y/N] y
$ sudo ivre ipdata --download
$ ivre ipdata --import-all --no-update-passive-db
And everything is OK. Just test some random IPs. For example 50 random IPs with 40 nmap processes.
sudo ivre runscans --routable --limit 50 --processes 40
Wait for scan to be finished!
And the result!

			
		"
IoT,"
			
				By means of IoT lots of things can be connected and controlled by Internet such as smart homes. In this small tutorial I will discuss about personal smart home solutions and how to remotely control them. In small word “Control your Home IoT System over TOR” 🙂

Solutions
For making your home smart and IoT there are multiple solutions. Google Home, Amazon Echo, Apple Home Kit, are some of the examples. Beside, open source projects can be used to install smart home equipment such as Hassbian or generally Raspbian.
Installing Raspbian Virtually
Here I will discuss about installing Raspbian virtually. It should be mentioned if you need to install Raspbian you do not need to install it on RaspberriPi, alternately you can install it virtually. But you should use special emulators for running Raspbian, since it is compiled in ARM architecture not in Intel x86 or AMD x64 or etc.
I will follow instructions from azeria labs to install virtual Raspbian on QEMU emulator on Ubuntu 16.04 x64.
Install qemu-system in Ubuntu
sudo apt-get install qemu-system
Installing QEMU Emulator
Download Raspbian and Kernel
Download Raspbian and the kernel for the emulator. For this tutorial I’ve used Raspbian Jessie from this link, QEMU rpi kernel can be downloaded from this link. I’ve downloaded 2017-07-05-raspbian-jessie.zip (Raspbian) and kernel-qemu-4.4.34-jessie (Kernel).
Then unzipped the Raspbian:
$ unzip 2017-07-05-raspbian-jessie.zip.zip

Archive:  2017-07-05-raspbian-jessie.zip
  inflating: 2017-07-05-raspbian-jessie.img

$ fdisk -l 2017-07-05-raspbian-jessie.img

Disk 2017-07-05-raspbian-jessie.img: 4.3 GiB, 4661483520 bytes, 9104460 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x970b8044

Device                          Boot Start     End Sectors  Size Id Type
2017-07-05-raspbian-jessie.img1       8192   93596   85405 41.7M  c W95 FAT32 (LBA)
2017-07-05-raspbian-jessie.img2      94208 9104459 9010252  4.3G 83 Linux

As you see above, (the last line) img2 part start from 94208.  94208 x 512 = 48234496 (bytes).
$ sudo mkdir /mnt/raspbian
$ sudo mount -v -o offset=48234496 -t ext4 2017-07-05-raspbian-jessie.img /mnt/raspbian
$ sudo nano /mnt/raspbian/etc/ld.so.preload
And comment out every line starting with '#'

$ sudo nano /mnt/raspbian/etc/fstab
From Azeria Labs:
IF you see anything with mmcblk0 in fstab, then:

Replace the first entry containing /dev/mmcblk0p1 with /dev/sda1
Replace the second entry containing /dev/mmcblk0p2 with /dev/sda2, save and exit.


Finally unmount the image.
$ sudo umount /mnt/raspbian
And run qemu with the following command:
$ qemu-system-arm -kernel kernel-qemu-4.4.34-jessie -cpu arm1176 -m 256 -M versatilepb
-serial stdio -append ""root=/dev/sda2 rootfstype=ext4 rw"" -hda 2017-07-05-raspbian-jessie.img
-redir tcp:5022::22 -no-reboot

As you will see, the QEMU will start Raspbian. It is just like you’ve write the Raspbian image on sdcard and insert to your RaspberryPi. Now the OS is ready.
Starting the Raspbian:
Booting Raspbian
And vola:
Raspbian Jessie
You can enable ssh using
sudo service ssh start
Then you can connect using
ssh [email protected] -p 5022
Default user is pi and password is raspberry.
SSH to Raspbian
Remote Control Alternatives
For the aim of remote control, there are some scenarios.
1) Using MQTT like protocols. In this scenario, your Smart Home solution is behind NAT and can send data to a public MQTT server (or your private one) but you cannot send and receive massive data such as remote desktop.
2) Opening ports in your router or modem (or somthing like UPNP). But this is risky and you should open direct access to your system.
3) Another alternative to avoid port forwarding, and send large data is using TOR hidden services. It allows to connect to your IoT system indirectly behind NAT.
Installing TOR and Hidden Service on Raspbian
Raspbian is just like debian or ubuntu and its repository is full of ARM compiled software such as TOR. Install TOR on your system using the following command:
$ sudo apt-get install tor
Installing TOR in Raspbian
You may change your time zone and run following command to sych the Raspbian time:
$ sudo sntp -s time.nist.gov
After installing tor, you should config the hidden service. Edit /etc/tor/torrc with nano:
$ sudo nano /etc/tor/torrc
And add the following lines:
HiddenServiceDir /home/pi/Desktop
HiddenServicePort 22 127.0.0.1:22
HiddenServicePort 80 127.0.0.1:6008
And save the file using CTRL+O and then CTRL+X to exit. Then restart tor using sudo service tor restart && tor as follows:
Starting TOR in Raspbian
Now you can find your onion address in /home/pi/Desktop/hostname. It is 16 characters which will be ended with an “.onion”.
SSH
SSH is almost done. Just config your client (outside your network) to connect to onion address:
Install proxy-connect in client:
$ sudo apt-get install proxy-connect
and change the /etc/ssh/ssh_config file and add the following lines:
Host *.onion
    ProxyCommand connect -S localhost:9050 %h %p
save the file and enjoy using SSH over TOR. In my case:
ssh [email protected]
Everything is OK. I can connect from everywhere to my home IoT Server.
Connected to my IoT Server over TOR
In my next post I will describe the remote desktop access to Raspbian. 🙂
			
		"
Cryptography,"
			
				In “Encrypting Emails using PGP/GPG”, I have described how to configure GPG (PGP) + Enigmail + Thunderbird for sending signed and encrypted emails. But the inner process of PGP is not described. In this post, I will describe how PGP works and the emulation process of PGP will be covered by the nice cryptography tool named cryptoolv2.
PGP

What is PGP: A Brief Introduction
Symmetric encryption is very good and have good performance/speed in encryption/decryption. But the main problem is in transferring keys between the Alice and Bob. Alice and Bob are two characters whom want to send encrypted messages to each other and is commonly used names in cryptographic systems. For more information check the Alice and Bob.
In other side, the power of asymmetric encryption is considerable. Every participant has two keys: the public key (e) which is accessible by everyone in the system and the private key (d) which is only accessible for the participant. One of the major abilities of this cryptography system is that the key transfer is very easy, because of the public key. Beside its abilities, it lags in encryption/decryption of large amount of data. If you want to know more about asymmetric encryption/decryption and the meaning of signature (encrypting with private key) and encryption (encrypting with public key), check Public-key cryptography.
PGP stands for Pretty Good Privacy which uses the power of asymmetric and symmetric encryption. Symmetric encryption lacks in key transfer which can be transferred by asymmetric encryption. The key size is not large in comparison of data which is going to be encrypted/decrypted.
So the system is OK. Encrypt the content with a random symmetric key (K). Sign and encrypt K with sender’s private key and receiver’s public key. The system is depicted in below but in the figure, sender does not sign the K, just encrypts with the receiver’s public key.
PGP Overall System
Cryptool
Cryptool is a nice GUI based tool for testing and learning cryptography. I’ve used version 2 of the program which can be run in Microsoft Windows. The tool is accessible from  cryptoolv2. The following picture shows a screenshot of the program in action.
Cryptool v2
PGP in Cryptool
I have configured the PGP protocol in cryptool and add signature and encryption for the system. The first picture shows the overall system and process.
PGP Overall System
The following picture shows the detailed work of each part. It should be noticed that there are some elements in the figure which RSA stands for asymmetric encryption/decryption system, AES for symmetric encryption/decryption and key generator for generating private and public keys.
PGP Detailed
The final picture shows the system in action. As shown, the decrypted message is the same as the plain text message (“Hello World!“).
PGP in Action
The project is attached in the following file. You may download and test the file as you like in cryptool v2.
download link
			
		"
Cryptography,"
			
				I have a workshop titled “Introduction to Cryptography and PGP” at Urmia University of Technology. I talked about basic concepts of signature and encryption using asymmetric cryptography. Then I talked about PGP which is one of the main usages of this system. I followed the workshop with configuring Thunderbird and GPG4win for applying PGP in Email system. You may find the contents in my previous post about GPG in Thunderbird and the way PGP works.
The pictures of this session is here.

Introduction to Cryptography and PGP 1
Introduction to Cryptography and PGP 2
Introduction to Cryptography and PGP 3
Introduction to Cryptography and PGP 4
Introduction to Cryptography and PGP 5
Introduction to Cryptography and PGP 6
Other sessions or information can be noticed from UUT Computer Society’s Telegram channel.
			
		"
Tutorial,"
			
				Last Wednesday, I have a small talk about SQLi web application vulnerability and how to prevent it. Here, I write about the tools and resources which can be used in learning the SQLi learning and prevention.
SQLi Session

The one of the best resources for learning lies in practicing. Practice make perfect. Therefore, penetration the vulnerable web application will make the learning much easier. Damn Vulnerable Web Application (DVWA) is one the vulnerable web applications for learning why and how the applications gets the vulnerabilities.
Some of sample injections tests on the special VM I’ve created for this session is below:
SQLi 1
SQLi 2
SQLi 3
The other tools are for dynamically analyzing web application:
SqlMap
noSQLMap
SQLiv
Grryfin
I also talked about how to statically analyze the web application. I’ve introduced RIPS which is the one of the most powerful frameworks for finding bugs in web application. The following image is a screenshot of RIPS scanner for DVWA 1.9.
SQLi RIPS
Also the Web Application Firewalls (WAFs) will help web servers before passing the user input to the vulnerable web application such as ModSecurity which can be handle user input along with Apache, and other WAFs …
In the end the session ended with some fun. 🙂
You may follow the sessions from UUT CEIT group:
UUT CEIT Instagram
UUT CEIT Telegram Channel
or in their web site at UUTidev
SQLi and Prevention Session
			
		"
Academic,"
			
													 Onion Address, Onion Harvester, Tor
							

		"
Media,"
			
				You may be like to collect and watch movies, TV series, or music archives. Then you have to store them in your storage ([External] Hard drives, NAS, …) and use some software to manage them.
However the scenario sounds good but there are other great ways to turn your home network to a full capable media center. Read more to learn how to configure and change your home network to media center.

As mentioned above you can use software solutions such as Ember Media Manager, Tiny Movie Manager for movies or MusicBrainz Picard for music.
Possible Media Sources
In your home network there may be some media sources such as:

NAS: Network shared NAS storage which contains your media.
Shared Folder: Windows (or *nix) shared folder containing your media.
Network Stream: Which streams your media over network.
USB: Media on a USB stick
External Hard: same as USB sticks

So there is a solution named OSMC (Open Source Media Center) which turns your TV (smart TV) to a media center.
What you Need

RaspberryPi (Visit this link)
MicroSD card (Visit this link)
USB stick or hard drives (You can buy everywhere!)
Probably a NAS (Visit this link)

Installing OSMC
Firstly you need to download OSMC installer and OS for your desired device. In our case we want to install it on RaspberryPi 2/3.
Link for downloader and OS (Last release while writing this post). You should put your microsd to your PC and run the installer. You may follow this video for details.
So great! Now you have your OSMC installed. It is recommended to use wired network to connect your RaspberryPi (also work with specific wireless dongles).
Configure OSMC

Insert OSMC installed microsd card to RaspberryPi
Plug your network cable to RaspberryPi
Connect your TV to RaspberryPi through HDMI
Plug your RaspberryPi power source

You should now see the OSMC in TV screen. For first run it takes some times to boot.
After it you may configure the first parameters. By default the SSH is enabled in OSMC. Now its time to do some advanced configuration.
Connect Your NAS (or Windows share)
You can mount NAS folders temporary or permanently.
Temporary
Login through SSH:
mount -t cifs -o username=<share user>,password=<share password> //WIN_PC_IP/<share name> /mnt

In this example the //WIN_PC_IP/<share name> to /mnt folder. Then you should add a video source to /mnt folder in OSMC. Visit this link.
Permanently
Login through SSH:
If you want to mount it permanently, add following line to your OSMC in /etc/fstab
//WIN_PC_IP/<share name>/ /mnt cifs noauto,x-systemd.automount,username=<share name>,password=<share password>,uid=1000,gid=1000,iocharset=utf8 0 0
which will mount your share to /mnt each time OSMC boots up. You have previously added /mnt as video source, so it will be displayed in Videos. OSMC will do search your folders for movies and download metadata using IMDB or other sources.
Connect Your USB
When connect your USB, OSMC will mount it automatically. But be aware, if an icon appeared in top right corner, it means that there is not enough power to supply your USB.
Play network stream
You may stream videos through your network. Here is a tutorial to stream using VLC. However, I myself prefer RTSP more than HTTP.
For playing it using OSMC, do the following:

Login to OSMC using SSH
Create a txt file where you want (I suggest to make it under /home/osmc/ for example /home/osmc/Live/Stream.strm)
Paste the address of stream in it and save it:
http://host:port/path/stream


or

mms://host:port/path/stream


or

rtsp://host:port/path/stream



Add the folder (/home/osmc/Live) as a video source and play the .strm file in OSMC after streaming video through your network. That’s it 🙂
You may check the following sources for more information:

There is a very complete guide on RaspberryPi in this link.
Also there is a video tutorial by Lynda in this link.

			
		"
Academic,"
			
				You may sometimes get bored with MS Word of (rarely) LibreOffice Writer. There is another document editor which is more likely to programming! LATEX!
In this tutorial I will show how to install LATEX in windows with TexStudio editor, step by step with pictures.

Configuring LATEX for Persian Text
Steps:

Download and install Miktex
Download and install TexStudio
Download and install Persian fonts
Start a new document with XePersian packages
Compile the document with XeTex

 
Download and install Miktex
For the first step you should download Miktex from the main repository and install it on your system. I suggest to install for your account and choose the default directories for installation.
So start the installer:
    
You may face such error in the last steps. It is all right. The fix is here:
Miktex has some fndb databases (4 files) which should be deleted and the installer fails to delete them. You can delete them manually. The folder is here (if you do not changed the default directories in installation):
%appdata%\Local\MiKTeX\2.9\miktex\data\le
After removal, execute miktex update in here:
%appdata%\Programs\MiKTeX 2.9\miktex\bin\x64\internal\miktex-update.exe
  
Miktex will select which packages needed to be updated. Just update them.
Miktex is installed successfully! 🙂
 
Download and install TexStudio
Among the document editors I prefer TexStudio. I’ve tested followings:

TexMaker Second best one!
Notepad++ LATEX template. A good tutorial is this link.
lyX Graphical LATEX editor

Find the Comparison of TeX editors.
But the steps to install TexStudio is quiet easy:
  
After installing you can run the TexStudio  and write your first document! It will work with no errors. But if you want to use XePersian for Farsi text, You should do more steps.
 
Download and install Persian fonts
The fons are started with XB => XB Yas, XB Zar, etc
You may download the fonts where you want but this link provides good fonts.

Download the fonts you want and install to windows fonts directory.
 
Start a new document with XePersian packages
Just start TexStudio and create a new document.
Basic commands for XePersian are:

\documentclass{article}
\usespackage{xepersian}
\settextfont{XB Niloofar}
\begin{document}
سلام دنیا!
\end{document}

If you just click F6 (compile command) in TexStudio it will ask you for download permission of extra packages.

 
Compile the document with XeTex
After downloading all necessary packages, you may face another problem like below:

XePersian uses XeTex for compile. So you should use following compiler in TexStudio:
Tools => Commands => XeLaTex
It will compile correctly! And if you to permanently change the compiler, do as below:
Options => Configure TexStudio => Build tab => XeLaTex as the default compiler

Everything is OK now! Happy XePersianning 🙂

			
		"
Academic,"
			
				I like to play with VirtualBox. So in this post I will show you how to install Kali Linux on a USB disk with VirtualBox which can be run both on VirtualBox and directly bootable.

Every change you made with VirtualBox (or direct access) will be stored on USB and can be accessed with Direct Access (or VirtualBox). It is awesome to use VirtualBox when you want to work beside another OS. And also awesome when you want to boot directly from Physical Computer.
The steps are very easy:

Create a virtual hard drive pointing to the USB.
Install Kali in VirtualBox as usual.
The disk is ready!

 
Requirements to Installing Kali Linux on USB
First of all you should download Kali Linux ISO from this link. Next download and install VirtualBox from this link.
Here you go. It is ready to fire!
 
Create a virtual hard drive
Here we are going to create a virtual disk (VMDK) that points to a physical drive. All the data is written in the physical drive and VirtualBox can directly access it.

Create a terminal (or command prompt) with administrative privileges.
Go to VirtualBox installation Directory

If you are on Linux or MAC it is not necessary, but if you’re running Windows, you should do this step: C:\Program Files\Oracle\VirtualBox


Attach your USB and find its physical driver number.

On windows goto Disk Management and find the Disk Number (As an example Disk1 refers to your USB, so the number is 1)


Create Virtual Drive with the following command:

For Windows
VBoxManage internalcommands createrawvmdk -filename ""C:\Users\<user_name>\VirtualBox VMs\<VM_folder_name>\<file_name>.vmdk"" -rawdisk \\.\PhysicalDrive#
For Linux:
VBoxManage internalcommands createrawvmdk -filename ""</path/to/file>.vmdk"" -rawdisk /dev/sda
For Mac OS X:
VBoxManage internalcommands createrawvmdk -filename ""</path/to/file>.vmdk"" -rawdisk /dev/disk#



# sign is the disk number. Step 4 credits go to this link .
 
Install Kali in VirtualBox
This step is easy. You should start VirtualBox with administrative privileges. The only point is that attach created virtual disk to the new virtual machine as below:

Then start the virtual machine. It will ask to attach Kali ISO.
After attaching Kali ISO image, every thing is the default installation of Kali. Here are some screen shots from my installation:
    
That’s it. You may like to boot with real computer or with your VirtualBox.
			
		"
Library,"
			
				Library and Book management is one of my favorite hobbies. I like to categorize (e)books, Albums, and Movies. It is more better if the contents are in my profession, IT!
Recently I and two of my students, have managed lots of IT Ebooks which I am going to tell it’s story.

Each electronic collection is made up 3 main steps:

Crawling the content
Purifying the content
Add more information to the content

Crawling the Content
For crawling the Elibrary content, I’ve choose ALLITEBOOKS.com which is a very up to date and has lots of IT ebooks. Mohammad Niazmandan and Alireza Shams, two of my students in Information Retrieval course, worked on crawling and downloading the content. After crawling 6545 ebooks and their metadata has been downloaded. The total size of the ebooks is 94.7 GB.

Purifying the Content
After having the books, it is turn of purifying the content. Calibre is one of my favorite library managers! It is Open Source, free, Python based and multi platform! Here is a shot from my calibre:
For purifying the content, firstly I’ve made a simple HTML parser to grab ISBN and tags from AllITEbooks book detail pages. Then add them to my calibre library using command line:
calibredb add --isbn ISBN_Of_The_Book --tags ""TAG1,TAG2,TAG3""  THE_BOOK.pdf
This will add all the books with ISBN and tags metadata to calibre.
Add More Information to the Content
Till now all the books are added to calibre and are pretty good! But having more meta data and details are appreciated. Thanks again Kovid Goyal for the Bulk Metadata Update feature of the calibre. It works nice but sometimes have problem with file names, specially when the title comes with #, ++ or etc. It is common in IT and Computers, for example Learning C#. So I decided to add the ebooks with only ISBN which always works.
The only step is to update calibre with Auto Meta Data. That’s All!
			
		"
AndroJava,"
			
				In this post I wanted to demonstrate a simple code injection example in Android. As indicated in previous  posts about reversing java, the method of code execution is same in Android. Whereas Java, the BYTE CODE are SMALI codes here and the executor is Dalvik (recently ART) in Android (not JVM). Here in this post, I will describe shortly how to reverse and inject code in SMALI.
The main steps for code injection are:

Decompile APK to Smali Code
Find the right place to inject the code
Use safe (or unsafe) local variables to inject
Recompile the Smali Code to APK
Generate Signature Key
Sign the Recompiled APK

Decompile APK to Smali Code
Using the tool named APK Tool you can easily decompile APK to its elements. Actually APK is a ZIP compressed file. Which contains Manifest (permissions, activities, services, etc.), all source codes compiled inside DEX (classes.dex), resources (all images, xml elements of UI, sounds, etc.), Libraries (generally native ones), META-INF (public key of the signature).

You can download apk tool from this link. Using the following command you can get the APK decompiled.
java -jar apktool.jar d YOUR_APK.apk
Find right place to inject the code
After successful decompilation, a folder will be generated beside the APK. There is a folder named smali there which contains all the classes inside the main DEX file. All of the classes are in Smali format over there. You can use each of them for injecting the code. Smali is the code like here:

In the above example, I put a simple Toast message after the setContentView() method of an Activity.
For making the smali code you can use two methods:

Use smali code instructions. You can use this link for more details.
TRICK: Write your code in a separate Android project and make its APK. The use apktool for finding out the smali code of your {injection} code!

 Use safe (or unsafe) local variables to inject
As you see in the above example, I have used v1,v2,v3, … for smali code injection.  are the local variables. Android has 16 registers for this purpose which contains the inside the class variables (v) and the parameters (p) of the method we are injecting inside. for example onCreate has two parameters (p0 for this, p1 for Bundle) and some variables (vs). You should use vs for your purpose while do not compromise other vs. If you can add extra locals to your file, then you can use safe variables, if not you should use the defined local variables without compromise other variables.
Recompile the Smali Code to APK
If the injection is correct, you can use the following command to recompile the injected code.
java -jar apktool.jar b THE_DECOMPILED_FOLDER
This will generate an APK inside THE_DECOMPILED_FOLDER/dist folder.
Generate Signature Key
Sign the Recompiled APK

			
		"
Academic,"
			
				In the next weeks, two sessions about web application vulnerabilities and Android Analysis and Code Injection will be held at Urmia University CERT.
You may register to the event through its registration link HERE.
Details about the sessions are in posters.

			
		"
Academic,"
			
				PGP (Pretty Good Privacy) is a protocol for encryption and authentication of files and emails. In this tutorial I want to show how to create encrypted and signed emails using GPG (GnuPG), Thunderbird (Email Client), and Enigmail (Connector). I used windows as test case which the steps are same for *nix systems.
There are three steps:

Installing GPG
Installing and configuring Thunderbird
Installing and configuring Enigmail
Send public keys to each other

Installing GPG
Get GPG application from GPG4win. If you are on Linux (Debian based ones), you can install it by following commad:
sudo apt-get install gnupg2
The steps are shown by images below:

Installing and configuring Thunderbird
You can install Thunderbird from their main site. Thunderbird is the default mail client in Linux systems.
Now you must add your email to Thunderbird using SMTP/IMAP (or POP3). I personally prefer IMAP which it has lots of features! Also SSL/TLS/STARTTLS support is appreciated. If your email is ftype of known emails, Thunderbird can automatically find it (ex. Gmail, Ymail, Outlook, etc) from Mozilla Email Database. If not, you may enter the SMTP and IMAP/POP3 connection information which can be get from your email provider. If SSL/TLS has self signed certificate, then you may check and accept it.

Installing and configuring Enigmail
After configuring Thunderbird, you should install Enigmail addon in Thunderbird which can be installed through Tools -> Add Ons -> enter Enigmail in search box.
After restarting Thunderbird, Enigmail starts its configuration. You should enter a password which is used for encryption and decryption of emails. And a revocation certificate is needed for when you lost your password or when you want to revoke it.
CAUTION: IF YOU LOST YOUR PASSWORD OR YOUR PRIVATE KEY, ALL EMAILS WHICH IS ENCRYPTED BY OTHERS CAN NOT BE RECOVERED!
      
Send public keys to each other
The final step is sending public keys of contacts to each other and mark each others public key as trusted. If you use Enigmail for the first time, it will ask you how to encrypt (sign) the message. I prefer to sign whole the message. Another point is that if you just sign Emails, the recipient will be sure that you have send it. But if you have recipients public key, you can both sign and encrypt the message. If you encrypt Emails, the email provider can not see your Email’s body part, but SUBJECT is still visible.
     
			
		"
